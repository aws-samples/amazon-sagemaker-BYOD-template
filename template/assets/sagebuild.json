{
  "Parameters": {
    "Parameters": {
      "Type": "String",
      "Default": "{}",
      "Description": "A JSON string that is merged into the SSM parameter store holding build parameters."
    },
    "AssetBucket": {
      "Type": "String",
      "Description": "the S3 bucket that holds the stack resources. Do not change unless you know what you are doing.",
      "Default": "sagebuild"
    },
    "AssetPrefix": {
      "Type": "String",
      "Description": "the S3 path that holds the stack resources. Do not change unless you know what you are doing.",
      "Default": "artifacts/blog"
    },
    "ExternalTrainingPolicy": {
      "Type": "String",
      "Description": "(Optional) the Arn of an IAM policy that is added to the Training role sagemaker uses",
      "Default": "EMPTY"
    },
    "ExternalHostingPolicy": {
      "Type": "String",
      "Description": "(Optional) the Arn of an IAM policy that is added to the Model role sagemaker uses",
      "Default": "EMPTY"
    },
    "ConfigFramework": {
      "Type": "String",
      "Description": "The Configuration of the stack.",
      "Default": "BYOD",
      "AllowedValues": [
        "AMAZON",
        "BYOD",
        "MXNET",
        "TENSORFLOW"
      ]
    },
    "ConfigDeploy": {
      "Type": "String",
      "Default": "SAGEMAKER",
      "Description": "The Type of deployment to use.",
      "AllowedValues": [
        "SAGEMAKER"
      ]
    },
    "Type": {
      "Type": "String",
      "Default": "DockerTrainDeploy",
      "AllowedValues": [
        "DockerTrainDeploy"
      ],
      "Description": "The type of SageMaker build pipeline to create"
    },
    "NoteBookInstanceType": {
      "Type": "String",
      "Default": "ml.t2.medium",
      "AllowedValues": [
        "ml.t2.medium",
        "ml.m4.xlarge",
        "ml.p2.xlarge",
        "NONE"
      ],
      "Description": "The SageMaker Notebook Instance type that will be created and pre-populated with a sagebuild tutorial notebook"
    },
    "ExternalDataBucket": {
      "Type": "String",
      "Default": "CREATE_BUCKET",
      "Description": "(Optional) S3 Bucket to use for training data"
    },
    "ExternalCodeBucket": {
      "Type": "String",
      "Default": "EMPTY",
      "Description": "(Optional) S3 Bucket to get container build zips"
    },
    "ExternalLaunchTopic": {
      "Type": "String",
      "Default": "EMPTY",
      "Description": "(Optional) Additional SNS Topic Used to trigger rebuilds"
    },
    "ExternalCodeCommitRepo": {
      "Type": "String",
      "Default": "CREATE_REPO",
      "Description": "(Optional) AWS CodeCommit repository that contains Dockerfile code."
    },
    "ExternalGithubRepo": {
      "Type": "String",
      "Default": "USE_CODECOMMIT_REPO",
      "Description": "(Optional) Http clone URL of a Github repository that contians Dockerfile code."
    },
    "BranchBuildTrigger": {
      "Type": "CommaDelimitedList",
      "Default": "master",
      "Description": "(Optional) Comma seperated list of branchs in the code repository that trigger a build when changed"
    },
    "EndpointConfigLambda": {
      "Type": "String",
      "Description": "The Arn of a Lambda function to override the default Endpoint Config lambda",
      "Default": "EMPTY"
    },
    "TrainingConfigLambda": {
      "Type": "String",
      "Description": "The Arn of a Lambda function to override the default Training Config lambda",
      "Default": "EMPTY"
    },
    "ModelConfigLambda": {
      "Type": "String",
      "Description": "The Arn of a Lambda function to override the default Model Config lambda",
      "Default": "EMPTY"
    }
  },
  "Conditions": {
    "ConfigDeploySAGEMAKER": {
      "Fn::Equals": [
        {
          "Ref": "ConfigDeploy"
        },
        "SAGEMAKER"
      ]
    },
    "ConfigFrameworkAMAZON": {
      "Fn::Equals": [
        {
          "Ref": "ConfigFramework"
        },
        "AMAZON"
      ]
    },
    "ConfigFrameworkBYOD": {
      "Fn::Equals": [
        {
          "Ref": "ConfigFramework"
        },
        "BYOD"
      ]
    },
    "ConfigFrameworkMXNET": {
      "Fn::Equals": [
        {
          "Ref": "ConfigFramework"
        },
        "MXNET"
      ]
    },
    "ConfigFrameworkTENSORFLOW": {
      "Fn::Equals": [
        {
          "Ref": "ConfigFramework"
        },
        "TENSORFLOW"
      ]
    },
    "StateMachineDockerTrainDeploy": {
      "Fn::Equals": [
        {
          "Ref": "Type"
        },
        "DockerTrainDeploy"
      ]
    },
    "ExternalHostingPolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalHostingPolicy"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "ExternalTrainingPolicy": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalTrainingPolicy"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "ExternalEndpointConfigLambda": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EndpointConfigLambda"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "ExternalTrainingConfigLambda": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "TrainingConfigLambda"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "ExternalModelConfigLambda": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ModelConfigLambda"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "NoteBookInstance": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NoteBookInstanceType"
            },
            "NONE"
          ]
        }
      ]
    },
    "CreateDataBucket": {
      "Fn::Equals": [
        {
          "Ref": "ExternalDataBucket"
        },
        "CREATE_BUCKET"
      ]
    },
    "CreateRepo": {
      "Fn::And": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalCodeCommitRepo"
            },
            "CREATE_REPO"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalGithubRepo"
            },
            "USE_CODECOMMIT_REPO"
          ]
        }
      ]
    },
    "CreateRepoTrigger": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalGithubRepo"
            },
            "USE_CODECOMMIT_REPO"
          ]
        }
      ]
    },
    "UseCodeBucket": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalCodeBucket"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "IsCodeCommitRepo": {
      "Fn::Equals": [
        {
          "Ref": "ExternalGithubRepo"
        },
        "USE_CODECOMMIT_REPO"
      ]
    },
    "SubscribeToExternalTopic": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ExternalLaunchTopic"
            },
            "EMPTY"
          ]
        }
      ]
    },
    "InvalidConfiguration": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ExternalGithubRepo"
                },
                "USE_CODECOMMIT_REPO"
              ]
            }
          ]
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "ExternalCodeCommitRepo"
                },
                "CREATE_REPO"
              ]
            }
          ]
        }
      ]
    }
  },
  "Outputs": {
    "CodeBucket": {
      "Value": {
        "Ref": "CodeBucket"
      }
    },
    "TrainingRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "TrainingRole",
          "Arn"
        ]
      }
    },
    "TrainingRole": {
      "Value": {
        "Ref": "TrainingRole"
      }
    },
    "ModelRole": {
      "Value": {
        "Ref": "ModelRole"
      }
    },
    "AlexaLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "AlexaLambda",
          "Arn"
        ]
      },
      "Description": "Lambda function for creating an alexa skill"
    },
    "ParameterStore": {
      "Value": {
        "Ref": "ParameterStore"
      }
    },
    "NoteBookUrl": {
      "Value": {
        "Fn::If": [
          "NoteBookInstance",
          {
            "Fn::Sub": "https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${Notebook.Name}"
          },
          "EMPTY"
        ]
      },
      "Description": "AWS Console url of your sagemaker notebook instance, from here you can open the instance"
    },
    "NoteBookInstance": {
      "Value": {
        "Fn::If": [
          "NoteBookInstance",
          {
            "Fn::Sub": "https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/${Notebook.Name}"
          },
          "EMPTY"
        ]
      },
      "Description": "AWS Console url of your sagemaker notebook instance, from here you can open the instance"
    },
    "NoteBookInstanceName": {
      "Value": {
        "Fn::If": [
          "NoteBookInstance",
          {
            "Fn::Sub": "${Notebook.Name}"
          },
          "EMPTY"
        ]
      },
      "Description": "AWS Console url of your sagemaker notebook instance, from here you can open the instance"
    },
    "DashboardUrl": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?",
            "region=",
            {
              "Ref": "AWS::Region"
            },
            "#dashboards:name=",
            {
              "Ref": "dashboard"
            }
          ]
        ]
      },
      "Description": "CloudWatch Dashboard that tracks Lambda, SageMaker, and step function metrics"
    },
    "TrainStatusTopic": {
      "Value": {
        "Ref": "TrainStatusTopic"
      },
      "Description": "SNS topic that gives success or failure updates of build"
    },
    "LaunchTopic": {
      "Value": {
        "Ref": "LaunchTopic"
      },
      "Description": "Topic that triggers a new build/train. Use this value to setup github webhook triggers."
    },
    "RollbackTopic": {
      "Value": {
        "Ref": "RollbackTopic"
      },
      "Description": "Topic that triggers a rollback fo the endpoint to the previous config"
    },
    "SageMakerEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "Variables",
          "EndpointName"
        ]
      },
      "Description": "Name of the SageMaker endpoint"
    },
    "StateMachine": {
      "Value": {
        "Ref": "StateMachine"
      },
      "Description": "StepFunction StateMachine the runs the build"
    },
    "DataBucket": {
      "Value": {
        "Fn::GetAtt": [
          "Variables",
          "DataBucket"
        ]
      },
      "Description": "S3 Bucket to put data for training in, will automaticaly trigger a new build"
    },
    "TrainingConfigLambda": {
      "Value": {
        "Fn::Sub": "${LambdaVariables.TrainingConfig}"
      },
      "Description": "Lambda function that returns the Training Job Config"
    },
    "EndpointConfigLambda": {
      "Value": {
        "Fn::Sub": "${LambdaVariables.EndpointConfig}"
      },
      "Description": "Lambda function that returns the Endpoint Config"
    },
    "ModelConfigLambda": {
      "Value": {
        "Fn::Sub": "${LambdaVariables.ModelConfig}"
      },
      "Description": "Lambda function that returns Model Configuration"
    },
    "RepoUrl": {
      "Value": {
        "Fn::GetAtt": [
          "Variables",
          "RepoUrl"
        ]
      },
      "Description": "CodeCommit repo to put Dockerfile code in, will automatically trigger a new build"
    },
    "StepFunctionConsole": {
      "Value": {
        "Fn::Sub": "https://console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${StateMachine}"
      },
      "Description": "AWS Console for the StepFunction StateMachine that controls the build"
    }
  },
  "Resources": {
    "ParamValidation": {
      "Type": "Custom::Variables",
      "Condition": "InvalidConfiguration",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "FailLambda",
            "Arn"
          ]
        },
        "reason": "Cannot specify both CodeCommit and Github repo"
      }
    },
    "Notebook": {
      "Type": "Custom::Variables",
      "Condition": "NoteBookInstance",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VariableLambda",
            "Arn"
          ]
        },
        "Name": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "LambdaVariables": {
      "Type": "Custom::Variables",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VariableLambda",
            "Arn"
          ]
        },
        "EndpointConfig": {
          "Fn::If": [
            "ExternalEndpointConfigLambda",
            {
              "Ref": "EndpointConfigLambda"
            },
            {
              "Fn::GetAtt": [
                "StepLambdaGetEndpointConfig",
                "Arn"
              ]
            }
          ]
        },
        "TrainingConfig": {
          "Fn::If": [
            "ExternalTrainingConfigLambda",
            {
              "Ref": "TrainingConfigLambda"
            },
            {
              "Fn::GetAtt": [
                "StepLambdaGetTrainingConfig",
                "Arn"
              ]
            }
          ]
        },
        "ModelConfig": {
          "Fn::If": [
            "ExternalModelConfigLambda",
            {
              "Ref": "ModelConfigLambda"
            },
            {
              "Fn::GetAtt": [
                "StepLambdaGetModelConfig",
                "Arn"
              ]
            }
          ]
        }
      }
    },
    "Variables": {
      "Type": "Custom::Variables",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VariableLambda",
            "Arn"
          ]
        },
        "EndpointName": {
          "op": "toLowerCase",
          "value": {
            "Ref": "AWS::StackName"
          }
        },
        "DataBucket": {
          "Fn::If": [
            "CreateDataBucket",
            {
              "Ref": "DataBucket"
            },
            {
              "Ref": "ExternalDataBucket"
            }
          ]
        },
        "RepoName": {
          "Fn::If": [
            "CreateRepo",
            {
              "Fn::GetAtt": [
                "CodeRepo",
                "Name"
              ]
            },
            {
              "Ref": "ExternalCodeCommitRepo"
            }
          ]
        },
        "RepoUrl": {
          "Fn::If": [
            "IsCodeCommitRepo",
            {
              "Fn::If": [
                "CreateRepo",
                {
                  "Fn::GetAtt": [
                    "CodeRepo",
                    "CloneUrlHttp"
                  ]
                },
                {
                  "Fn::Sub": "https://codecommit.us-east-1.amazonaws.com/v1/repos/${ExternalCodeCommitRepo}"
                }
              ]
            },
            {
              "Ref": "ExternalGithubRepo"
            }
          ]
        }
      }
    },
    "ClearECRLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\"),aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var cb=new aws.CodeBuild,s3=new aws.S3,ecr=new aws.ECR,lambda=new aws.Lambda;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),\"Delete\"===event.RequestType?new Promise(function(res,rej){var token;!function next(){ecr.listImages({repositoryName:event.ResourceProperties.repo,nextToken:token}).promise().then(function(result){return ecr.batchDeleteImage({imageIds:result.imageIds,repositoryName:event.ResourceProperties.repo}).promise().then(function(){result.nextToken?(token=result.nextToken,setTimeout(()=>next(),500)):res()})}).catch(rej)}()}).then(()=>response.send(event,context,response.SUCCESS)).catch(x=>{console.log(x),response.send(event,context,response.SUCCESS)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "CodeCommitTriggerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var cc=new aws.CodeCommit;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,cc.getRepositoryTriggers({repositoryName:params.repositoryName}).promise().then(function(result){var triggers=result.triggers.filter(x=>x.name!==params.trigger.name);return\"Delete\"!==event.RequestType&&triggers.push(params.trigger),cc.putRepositoryTriggers({repositoryName:params.repositoryName,triggers:triggers}).promise()}).then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)})};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "FailLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "function send(event,context,responseStatus,reason,responseData,physicalResourceId){var responseBody=JSON.stringify({Status:responseStatus,Reason:reason,PhysicalResourceId:physicalResourceId||context.logStreamName,StackId:event.StackId,RequestId:event.RequestId,LogicalResourceId:event.LogicalResourceId,Data:responseData});console.log(\"Response body:\\n\",responseBody);var https=require(\"https\"),parsedUrl=require(\"url\").parse(event.ResponseURL),options={hostname:parsedUrl.hostname,port:443,path:parsedUrl.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":responseBody.length}},request=https.request(options,function(response){console.log(\"Status code: \"+response.statusCode),console.log(\"Status message: \"+response.statusMessage),context.done()});request.on(\"error\",function(error){console.log(\"send(..) failed executing https.request(..): \"+error),context.done()}),request.write(responseBody),request.end()}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),send(event,context,\"FAILED\",event.ResourceProperties.reason)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "JupyterApiProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var sagemaker=new aws.SageMaker,https=require(\"https\"),URL=require(\"url\");function send(args){return sagemaker.createPresignedNotebookInstanceUrl({NotebookInstanceName:args.InstanceName}).promise().then(function(result){console.log(result);var url=URL.parse(result.AuthorizedUrl);return console.log(url),new Promise(function(res,rej){var opts={hostname:url.hostname,protocol:url.protocol,post:443,path:`${url.pathname}${url.search}`,method:\"GET\"};console.log(opts);var req=https.request(opts,x=>{opts.headers={Cookie:x.headers[\"set-cookie\"].join(\"; \")},opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()})}).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=x.headers.location,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>(console.log(opts),new Promise(function(res,rej){var req=https.request(opts,x=>{opts.path=args.path,opts.method=args.method,res(opts)});req.on(\"error\",rej),req.end()}))).then(opts=>{var body=[];return console.log(opts),new Promise(function(res,rej){var req=https.request(opts,response=>{response.on(\"data\",chunk=>{body.push(chunk)}),response.on(\"end\",()=>{res(Buffer.concat(body).toString())})});args.body&&req.write(args.body),req.on(\"error\",rej),req.end()})}).then(x=>{try{return JSON.parse(x)}catch(e){return x}})}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties[event.RequestType.toLowerCase()];params?(console.log(params),send(params).then(result=>{console.log(result),response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)})):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "ParameterUpdateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\"),aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION;var ssm=new aws.SSM;function isObject(item){return item&&\"object\"==typeof item&&!Array.isArray(item)}function isShallow(item){return!Array.isArray(item)||!item.find(item=>\"object\"==typeof item)}function assign(target,...sources){if(!sources.length)return target;const source=sources.shift();if(isObject(target)&&isObject(source))for(const key in source)isObject(source[key])?(target[key]||Object.assign(target,{[key]:{}}),assign(target[key],source[key])):isShallow(source[key])?Object.assign(target,{[key]:source[key]}):(target[key]||Object.assign(target,{[key]:[]}),Object.assign(target,{[key]:source[key].map((item,index)=>assign(target[key][index]||{},item))}));return assign(target,...sources)}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,\"Delete\"!==event.RequestType?ssm.getParameter({Name:params.name}).promise().then(function(result){return console.log(JSON.stringify(result,null,2)),value=JSON.parse(result.Parameter.Value),value=assign(value,JSON.parse(params.value)),ssm.putParameter({Name:params.name,Type:result.Parameter.Type,Value:JSON.stringify(value),Overwrite:!0}).promise()}).then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS,params)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "S3ClearLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var s3=new aws.S3;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;\"Delete\"===event.RequestType?new Promise(function(res,rej){!function next(){s3.listObjectVersions({Bucket:params.Bucket,Prefix:params.Prefix}).promise().then(x=>x.Versions.concat(x.DeleteMarkers)).then(function(files){return files.map(file=>({Key:file.Key,VersionId:file.VersionId}))}).then(function(keys){if(keys.length>0)return s3.deleteObjects({Bucket:params.Bucket,Delete:{Objects:keys}}).promise().then(()=>next()).catch(rej);res()})}()}).then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "S3NotificationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var s3=new aws.S3;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,\"Delete\"!==event.RequestType?s3.putBucketNotificationConfiguration(params).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(e=>{console.log(e),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerClearEndpointLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2)),\"Delete\"===event.RequestType?sagemaker.deleteEndpoint({EndpointName:event.ResourceProperties.name}).promise().then(()=>response.send(event,context,response.SUCCESS)).catch(x=>{console.log(x),response.send(event,context,response.SUCCESS)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerClearEndpointConfigLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));event.ResourceProperties;\"Delete\"===event.RequestType?sagemaker.listEndpointConfigs({NameContains:event.name,NextToken:event.NextToken}).promise().then(result=>{if(result.EndpointConfigs.length)return event.NextToken=result.NextToken,new Promise(function(res,rej){!function next(index){var item=result.EndpointConfigs[index];item?sagemaker.deleteEndpointConfig({EndpointConfigName:item.EndpointConfigName}).promise().then(x=>next(index-1)).catch(error=>{\"ThrottlingException\"===error.code?setTimeout(()=>next(index),2e3):rej(error)}):res()}(0)}).then(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise());response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerClearModelLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));event.ResourceProperties;\"Delete\"===event.RequestType?sagemaker.listModels({NameContains:event.name,NextToken:event.NextToken}).promise().then(result=>{if(result.Models.length)return event.NextToken=result.NextToken,new Promise(function(res,rej){!function next(index){var item=result.Models[index];item?sagemaker.deleteModel({ModelName:item.ModelName}).promise().then(x=>next(index-1)).catch(error=>{\"ThrottlingException\"===error.code?setTimeout(()=>next(index),2e3):rej(error)}):res()}(0)}).then(()=>lambda.invoke({FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,InvocationType:\"Event\",Payload:JSON.stringify(event)}).promise()).catch(function(err){\"ThrottlingException\"===err.code?setTimeout(()=>next(index),1e3):rej(err)});response.send(event,context,response.SUCCESS)}).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "SageMakerNotebookRoleLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\"),response=require(\"cfn-response\");aws.config.region=process.env.AWS_REGION;var lambda=new aws.Lambda,sagemaker=new aws.SageMaker;exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,\"Delete\"!==event.RequestType?sagemaker.describeNotebookInstance(params).promise().then(x=>response.send(event,context,response.SUCCESS,{Arn:x.RoleArn},x.RoleArn.match(/arn:aws:iam::.*:role\\/(.*)/)[1])).catch(error=>{console.log(error),response.send(event,context,response.FAILED)}):response.send(event,context,response.SUCCESS)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "VariableLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response=require(\"cfn-response\");exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var params=event.ResourceProperties;delete params.ServiceToken,Object.keys(params).forEach(function(key){var value=params[key];\"object\"==typeof value&&(\"toLowerCase\"===value.op?params[key]=value.value.toLowerCase():params[key]=value.value)}),response.send(event,context,response.SUCCESS,params)};"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          "arn:aws:iam::aws:policy/AWSCodeCommitFullAccess",
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
        ]
      }
    },
    "CFNLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Roles": [
          {
            "Ref": "CFNLambdaRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ecr:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:Get*",
                "ssm:Put*"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterStore}"
              }
            }
          ]
        }
      }
    },
    "StepLambdaGetDataConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {}
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigFrameworkBYOD",
              "var aws=require('aws-sdk')\nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    try{\n        var channels=event.params.channels\n        var out=Object.keys(channels).map(function(key){\n            var out={\n              \"ChannelName\":key, \n              \"DataSource\": { \n                \"S3DataSource\": { \n                  \"S3DataType\": \"S3Prefix\", \n                  \"S3Uri\":`s3://${event.params.databucket}/${channels[key].path}`, \n                  \"S3DataDistributionType\": channels[key].dist ? \"ShardedByS3Key\"  : \"FullyReplicated\"\n                }\n              },\n              \"CompressionType\": \"None\",\n              \"RecordWrapperType\": \"None\"\n            }\n            if(channels[key].contentType){\n                out.ContentType=channels[key].contentType\n            }\n            return out\n        })\n        \n        callback(null,out)\n    }catch(e){\n        console.log(e)\n        callback(new Error(e))\n    }\n}\n",
              "var aws=require('aws-sdk')\nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    try{\n        var channels=event.params.channels\n        var out=Object.keys(channels).map(function(key){\n            var out={\n              \"ChannelName\":key, \n              \"DataSource\": { \n                \"S3DataSource\": { \n                  \"S3DataType\": \"S3Prefix\", \n                  \"S3Uri\":`s3://${event.params.databucket}/${channels[key].path}`, \n                  \"S3DataDistributionType\": channels[key].dist ? \"ShardedByS3Key\"  : \"FullyReplicated\"\n                }\n              },\n              \"CompressionType\": \"None\",\n              \"RecordWrapperType\": \"None\"\n            }\n            if(channels[key].contentType){\n                out.ContentType=channels[key].contentType\n            }\n            return out\n        })\n        \n        callback(null,out)\n    }catch(e){\n        console.log(e)\n        callback(new Error(e))\n    }\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigFrameworkBYOD",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaGetEndpointConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {}
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigFrameworkBYOD",
              "import json\nimport os\ndef handler(event,context):\n    print(json.dumps(event,indent=2))\n    return {\n      \"ProductionVariants\": [{\n          \"InitialInstanceCount\":event[\"params\"][\"hostinstancecount\"], \n          \"InstanceType\":event[\"params\"][\"hostinstancetype\"],\n          \"ModelName\":event[\"args\"][\"model\"][\"ModelName\"], \n          \"VariantName\":event[\"params\"][\"version\"], \n        }]\n    } \n",
              "import json\nimport os\ndef handler(event,context):\n    print(json.dumps(event,indent=2))\n    return {\n      \"ProductionVariants\": [{\n          \"InitialInstanceCount\":event[\"params\"][\"hostinstancecount\"], \n          \"InstanceType\":event[\"params\"][\"hostinstancetype\"],\n          \"ModelName\":event[\"args\"][\"model\"][\"ModelName\"], \n          \"VariantName\":event[\"params\"][\"version\"], \n        }]\n    } \n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigFrameworkBYOD",
            "python3.6",
            "python3.6"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaGetModelConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {}
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigFrameworkAMAZON",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar s3=new aws.S3()\n\nexports.handler=(event,context,callback)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    if(event.status.training.ModelArtifacts){\n        var ModelDataUrl=event.status.training.ModelArtifacts.S3ModelArtifacts \n    }else{\n        var ModelDataUrl=`${event.status.training.TrainingJobDefinition.OutputDataConfig.S3OutputPath}/${event.status.training.BestTrainingJob.TrainingJobName}/output/model.tar.gz`\n    }\n   \n    var key= `versions/inference/v${event.params.version}.py`\n    callback(null,{\n        ExecutionRoleArn:event.params.modelrole,\n        ModelName:`${event.params.name}-${event.params.id}`,\n        PrimaryContainer:{\n            Image:create_image_uri(event.params),\n            ModelDataUrl,\n            Environment:event.params.modelhostingenvironment || {}\n        },\n        Tags:[{\n            Key:\"sagebuild:stack\",\n            Value:event.params.stackname\n        }]\n    })\n}\nfunction create_image_uri(params){\n    var algorithm=params.algorithm.toLowerCase()\n    if([\"kmeans\",\"pca\", \"factorization-machines\",\"linear-learner\", \"ntm\", \"randomcutforest\"].includes(algorithm)){\n        var account={\n            \"us-west-2\":\"174872318107\",\n            \"us-east-1\":\"382416733822\",\n            \"us-east-2\":\"404615174143\",\n            \"eu-west-1\":\"438346466558\",\n            \"ap-northeast-1\":\"351501993468\"\n        }[process.env.AWS_REGION]\n    }else if(params.algorithm===\"lda\"){\n        var account={\n            \"us-west-2\":\"999678624901\",\n            \"us-east-1\":\"766337827248\",\n            \"us-east-2\":\"999911452149\",\n            \"eu-west-1\":\"266724342769\",\n            \"ap-northeast-1\":\"258307448986\"\n        }[process.env.AWS_REGION]\n    }else if([\"xgboost\",\"image-classification\",\"seq2seq\",\"blazingtext\"].includes(algorithm)){\n        var account={\n            \"us-west-2\":\"433757028032\",\n            \"us-east-1\":\"811284229777\",\n            \"us-east-2\":\"825641698319\",\n            \"eu-west-1\":\"685385470294\",\n            \"ap-northeast-1\":\"501404015308\"\n        }[process.env.AWS_REGION]\n    }else if(params.algorithm===\"forecasting-deepar\"){\n        var account={\n            \"us-west-2\":\"156387875391\",\n            \"us-east-1\":\"522234722520\",\n            \"us-east-2\":\"566113047672\",\n            \"eu-west-1\":\"224300973850\",\n            \"ap-northeast-1\":\"633353088612\"\n        }[process.env.AWS_REGION]\n    }\n\n    return `${account}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/${algorithm}:1`\n}\n",
              {
                "Fn::If": [
                  "ConfigFrameworkBYOD",
                  "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,callback)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    if(event.params.ModelArtifacts){\n        var ModelDataUrl=event.params.ModelArtifacts\n    }else if(event.status.training.ModelArtifacts){\n        var ModelDataUrl=event.status.training.ModelArtifacts.S3ModelArtifacts \n    }else{\n        var ModelDataUrl=`${event.status.training.TrainingJobDefinition.OutputDataConfig.S3OutputPath}/${event.status.training.BestTrainingJob.TrainingJobName}/output/model.tar.gz`\n    }\n\n    try{\n        callback(null,{\n            ExecutionRoleArn:event.params.modelrole,\n            ModelName:`${event.params.name}-${event.params.id}`,\n            PrimaryContainer:{\n                Image:event.params.InferenceImage || `${event.params.accountid}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/${event.params.ecrrepo}:Inference_v${event.params.version}`,\n                ModelDataUrl,\n                Environment:event.params.modelhostingenvironment\n            },\n            Tags:[{\n                Key:\"sagebuild:stack\",\n                Value:event.params.stackname\n            }]\n        })\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n",
                  {
                    "Fn::If": [
                      "ConfigFrameworkMXNET",
                      "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar s3=new aws.S3()\n\nexports.handler=(event,context,callback)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    if(event.status.training.ModelArtifacts){\n        var ModelDataUrl=event.status.training.ModelArtifacts.S3ModelArtifacts \n    }else{\n        var ModelDataUrl=`${event.status.training.TrainingJobDefinition.OutputDataConfig.S3OutputPath}/${event.status.training.BestTrainingJob.TrainingJobName}/output/model.tar.gz`\n    }\n   \n    var key= `versions/inference/v${event.params.version}.tar.gz`\n    s3.copyObject({\n        CopySource:event.params.hostsourcefile.match(/s3:\\/\\/(.*)/)[1],\n        Bucket:event.params.codebucket,\n        Key:key\n    }).promise()\n    .then(function(){\n        callback(null,{\n            ExecutionRoleArn:event.params.modelrole,\n            ModelName:`${event.params.name}-${event.params.id}`,\n            PrimaryContainer:{\n                Image:create_image_uri(event.params),\n                ModelDataUrl,\n                Environment:Object.assign({\n                    SAGEMAKER_CONTAINER_LOG_LEVEL:event.params.containerloglevel,\n                    SAGEMAKER_ENABLE_CLOUDWATCH_METRICS:event.params.enablecloudwatchmetrics,\n                    SAGEMAKER_PROGRAM:`${event.params.hostentrypoint}`,\n                    SAGEMAKER_REGION:`${process.env.AWS_REGION}`,\n                    SAGEMAKER_SUBMIT_DIRECTORY:`s3://${event.params.codebucket}/${key}`,\n                },event.params.modelhostingenvironment || {})\n            },\n            Tags:[{\n                Key:\"sagebuild:stack\",\n                Value:event.params.stackname\n            }]\n        })\n    })\n    .catch(x=>callback(new Error(x)))\n}\n\nfunction create_image_uri(params){\n    var account='520713654638'\n    var instance=params.traininstancetype.split('.')[1][0]===\"p\" ? \"gpu\" : \"cpu\"\n    return `${account}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/sagemaker-mxnet:${params.mxnetversion}-${instance}-${params.pyversion}`\n}\n",
                      {
                        "Fn::If": [
                          "ConfigFrameworkTENSORFLOW",
                          "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar s3=new aws.S3()\n\nexports.handler=(event,context,callback)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    if(event.status.training.ModelArtifacts){\n        var ModelDataUrl=event.status.training.ModelArtifacts.S3ModelArtifacts \n    }else{\n        var ModelDataUrl=`${event.status.training.TrainingJobDefinition.OutputDataConfig.S3OutputPath}/${event.status.training.BestTrainingJob.TrainingJobName}/output/model.tar.gz`\n    }\n       \n    var key= `versions/inference/v${event.params.version}.py`\n    s3.copyObject({\n        CopySource:event.params.hostsourcefile.match(/s3:\\/\\/(.*)/)[1],\n        Bucket:event.params.codebucket,\n        Key:key\n    }).promise()\n    .then(function(){\n        callback(null,{\n            ExecutionRoleArn:event.params.modelrole,\n            ModelName:`${event.params.name}-${event.params.id}`,\n            PrimaryContainer:{\n                Image:create_image_uri(event.params),\n                ModelDataUrl,\n                Environment:Object.assign({\n                    SAGEMAKER_CONTAINER_LOG_LEVEL:event.params.containerloglevel,\n                    SAGEMAKER_ENABLE_CLOUDWATCH_METRICS:event.params.enablecloudwatchmetrics,\n                    SAGEMAKER_PROGRAM:`${event.params.hostentrypoint}`,\n                    SAGEMAKER_REGION:`${process.env.AWS_REGION}`,\n                    SAGEMAKER_SUBMIT_DIRECTORY:`s3://${event.params.codebucket}/${key}`,\n                },event.params.modelhostingenvironment || {})\n            },\n            Tags:[{\n                Key:\"sagebuild:stack\",\n                Value:event.params.stackname\n            }]\n        })\n    })\n    .catch(x=>callback(new Error(x)))\n}\n\nfunction create_image_uri(params){\n    var account='520713654638'\n    var instance=params.traininstancetype.split('.')[1][0]===\"p\" ? \"gpu\" : \"cpu\"\n    return `${account}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/sagemaker-tensorflow:${params.tensorflowversion}-${instance}-${params.pyversion}`\n}\n",
                          "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,callback)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    if(event.params.ModelArtifacts){\n        var ModelDataUrl=event.params.ModelArtifacts\n    }else if(event.status.training.ModelArtifacts){\n        var ModelDataUrl=event.status.training.ModelArtifacts.S3ModelArtifacts \n    }else{\n        var ModelDataUrl=`${event.status.training.TrainingJobDefinition.OutputDataConfig.S3OutputPath}/${event.status.training.BestTrainingJob.TrainingJobName}/output/model.tar.gz`\n    }\n\n    try{\n        callback(null,{\n            ExecutionRoleArn:event.params.modelrole,\n            ModelName:`${event.params.name}-${event.params.id}`,\n            PrimaryContainer:{\n                Image:event.params.InferenceImage || `${event.params.accountid}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/${event.params.ecrrepo}:Inference_v${event.params.version}`,\n                ModelDataUrl,\n                Environment:event.params.modelhostingenvironment\n            },\n            Tags:[{\n                Key:\"sagebuild:stack\",\n                Value:event.params.stackname\n            }]\n        })\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n"
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigFrameworkAMAZON",
            "nodejs6.10",
            {
              "Fn::If": [
                "ConfigFrameworkBYOD",
                "nodejs6.10",
                {
                  "Fn::If": [
                    "ConfigFrameworkMXNET",
                    "nodejs6.10",
                    {
                      "Fn::If": [
                        "ConfigFrameworkTENSORFLOW",
                        "nodejs6.10",
                        "nodejs6.10"
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaGetTrainingConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {}
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigFrameworkAMAZON",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    try{\n        var Hyperparameters=event.params.hyperparameters\n\n        callback(null,{\n          \"AlgorithmSpecification\": { \n            \"TrainingImage\":create_image_uri(event.params), \n            \"TrainingInputMode\":event.params.inputmode\n          },\n          \"OutputDataConfig\": { \n            'S3OutputPath':`s3://${event.params.artifactbucket}`, \n          },\n          \"ResourceConfig\": { \n            \"InstanceCount\": event.params.traininstancecount, \n            \"InstanceType\": event.params.traininstancetype, \n            \"VolumeSizeInGB\":parseInt(event.params.trainvolumesize), \n          },\n          \"RoleArn\":event[\"params\"][\"trainingrole\"], \n          \"StoppingCondition\": { \n            \"MaxRuntimeInSeconds\":parseInt(event.params.trainmaxrun)*60*60\n          },\n          \"TrainingJobName\":`${event.params.name}-${event.params.id}`, \n          \"HyperParameters\":Hyperparameters,\n          \"Tags\": []\n        })\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n\nfunction create_image_uri(params){\n    var algorithm=params.algorithm.toLowerCase()\n    if([\"kmeans\",\"pca\", \"factorization-machines\",\"linear-learner\", \"ntm\", \"randomcutforest\"].includes(algorithm)){\n        var account={\n            \"us-west-2\":\"174872318107\",\n            \"us-east-1\":\"382416733822\",\n            \"us-east-2\":\"404615174143\",\n            \"eu-west-1\":\"438346466558\",\n            \"ap-northeast-1\":\"351501993468\"\n        }[process.env.AWS_REGION]\n    }else if(params.algorithm===\"lda\"){\n        var account={\n            \"us-west-2\":\"999678624901\",\n            \"us-east-1\":\"766337827248\",\n            \"us-east-2\":\"999911452149\",\n            \"eu-west-1\":\"266724342769\",\n            \"ap-northeast-1\":\"258307448986\"\n        }[process.env.AWS_REGION]\n    }else if([\"xgboost\",\"image-classification\",\"seq2seq\",\"blazingtext\"].includes(algorithm)){\n        var account={\n            \"us-west-2\":\"433757028032\",\n            \"us-east-1\":\"811284229777\",\n            \"us-east-2\":\"825641698319\",\n            \"eu-west-1\":\"685385470294\",\n            \"ap-northeast-1\":\"501404015308\"\n        }[process.env.AWS_REGION]\n    }else if(params.algorithm===\"forecasting-deepar\"){\n        var account={\n            \"us-west-2\":\"156387875391\",\n            \"us-east-1\":\"522234722520\",\n            \"us-east-2\":\"566113047672\",\n            \"eu-west-1\":\"224300973850\",\n            \"ap-northeast-1\":\"633353088612\"\n        }[process.env.AWS_REGION]\n    }\n\n    return `${account}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/${algorithm}:1`\n}\n",
              {
                "Fn::If": [
                  "ConfigFrameworkBYOD",
                  "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n\n    try{\n        image=event.params.TrainingImage || `${event.params.accountid}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/${event.params.ecrrepo}:Training_v${event.params.version}`\n\n        var Hyperparameters=Object.assign({\n            sagemaker_job_name:`\"${event.params.name}-${event.params.id}\"`,\n            sagemaker_region:`\"${process.env.AWS_REGION}\"`,\n            checkpoint_path:`\"s3://${event.params.checkpointbucket}/${event.params.name}-${event.params.id}/checkpoints\"`,\n        },event.params.hyperparameters)\n\n        callback(null,{\n          \"AlgorithmSpecification\": { \n            \"TrainingImage\":image, \n            \"TrainingInputMode\":event[\"params\"][\"inputmode\"]\n          },\n          \"InputDataConfig\": [ \n            {\n              \"ChannelName\": \"training\", \n              \"DataSource\": { \n                \"S3DataSource\": { \n                  \"S3DataType\": \"S3Prefix\", \n                  \"S3Uri\":`s3://${event['params']['databucket']}/train/`, \n                  \"S3DataDistributionType\": \"FullyReplicated\" \n                }\n              },\n              \"CompressionType\": \"None\",\n              \"RecordWrapperType\": \"None\" \n            },\n          ],\n          \"OutputDataConfig\": { \n            'S3OutputPath':`s3://${event['params']['artifactbucket']}`, \n          },\n          \"ResourceConfig\": { \n            \"InstanceCount\": event[\"params\"][\"traininstancecount\"], \n            \"InstanceType\": event[\"params\"][\"traininstancetype\"], \n            \"VolumeSizeInGB\": parseInt(event[\"params\"][\"trainvolumesize\"]), \n          },\n          \"RoleArn\":event[\"params\"][\"trainingrole\"], \n          \"StoppingCondition\": { \n            \"MaxRuntimeInSeconds\":parseInt(event[\"params\"][\"trainmaxrun\"])*60*60\n          },\n          \"TrainingJobName\":`${event.params.name}-${event.params.id}`, \n          \"HyperParameters\":Hyperparameters,\n          \"Tags\": []\n        })\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n",
                  {
                    "Fn::If": [
                      "ConfigFrameworkMXNET",
                      "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var key= `versions/training/v${event.params.version}.tar.gz`\n    try{\n        s3.copyObject({\n            CopySource:event.params.trainsourcefile.match(/s3:\\/\\/(.*)/)[1],\n            Bucket:event.params.codebucket,\n            Key:key\n        }).promise()\n        .then(function(){\n            var others=event.params.hyperparameters || {} \n            Object.keys(others).forEach(function(key){\n                others[key]=`${JSON.stringify(others[key])}` \n            })\n            var Hyperparameters=Object.assign({\n                sagemaker_container_log_level:event.params.containerloglevel,\n                sagemaker_enable_cloudwatch_metrics:event.params.enablecloudwatchmetrics,\n                sagemaker_job_name:`\"${event.params.name}\"`,\n                sagemaker_program:`\"${event.params.trainentrypoint}\"`,\n                sagemaker_region:`\"${process.env.AWS_REGION}\"`,\n                sagemaker_submit_directory:`\"s3://${event.params.codebucket}/${key}\"`,\n                checkpoint_path:`\"s3://${event.params.checkpointbucket}/${event.params.name}-${event.params.id}/checkpoints\"`,\n            }, others)\n\n            Object.keys(Hyperparameters).forEach(x=>{\n                var value=Hyperparameters[x]\n                Hyperparameters[x]= typeof value===\"string\" ? value : JSON.stringify(value)\n            })\n            callback(null,{\n              \"AlgorithmSpecification\": { \n                \"TrainingImage\":create_image_uri(event.params), \n                \"TrainingInputMode\":event.params.inputmode\n              },\n              \"OutputDataConfig\": { \n                'S3OutputPath':`s3://${event.params.artifactbucket}`, \n              },\n              \"ResourceConfig\": { \n                \"InstanceCount\": event.params.traininstancecount, \n                \"InstanceType\": event.params.traininstancetype, \n                \"VolumeSizeInGB\":parseInt(event.params.trainvolumesize), \n              },\n              \"RoleArn\":event[\"params\"][\"trainingrole\"], \n              \"StoppingCondition\": { \n                \"MaxRuntimeInSeconds\":parseInt(event.params.trainmaxrun)*60*60\n              },\n              \"TrainingJobName\":`${event.params.name}-${event.params.id}`, \n              \"HyperParameters\":Hyperparameters,\n              \"Tags\": []\n            })\n        })\n        .catch(x=>callback(new Error(x)))\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n\nfunction create_image_uri(params){\n    var account='520713654638'\n    var instance=params.traininstancetype.split('.')[1][0]===\"p\" ? \"gpu\" : \"cpu\"\n    return `${account}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/sagemaker-mxnet:${params.mxnetversion}-${instance}-${params.pyversion}`\n}\n",
                      {
                        "Fn::If": [
                          "ConfigFrameworkTENSORFLOW",
                          "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar s3=new aws.S3()\n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n    var key= `versions/training/v${event.params.version}.tar.gz`\n    try{\n        s3.copyObject({\n            CopySource:event.params.trainsourcefile.match(/s3:\\/\\/(.*)/)[1],\n            Bucket:event.params.codebucket,\n            Key:key\n        }).promise()\n        .then(function(){\n            var others=event.params.hyperparameters || {} \n            Object.keys(others).forEach(function(key){\n                others[key]=`${JSON.stringify(others[key])}` \n            })\n            var Hyperparameters=Object.assign({\n                sagemaker_container_log_level:event.params.containerloglevel,\n                sagemaker_enable_cloudwatch_metrics:event.params.enablecloudwatchmetrics,\n                sagemaker_job_name:`\"${event.params.name}-${event.params.id}\"`,\n                sagemaker_program:`\"${event.params.trainentrypoint}\"`,\n                sagemaker_region:`\"${process.env.AWS_REGION}\"`,\n                sagemaker_submit_directory:`\"s3://${event.params.codebucket}/${key}\"`,\n                checkpoint_path:`\"s3://${event.params.checkpointbucket}/${event.params.name}-${event.params.id}/checkpoints\"`,\n            },others)\n\n            Object.keys(Hyperparameters).forEach(x=>{\n                var value=Hyperparameters[x]\n                Hyperparameters[x]= typeof value===\"string\" ? value : JSON.stringify(value)\n            })\n            callback(null,{\n              \"AlgorithmSpecification\": { \n                \"TrainingImage\":create_image_uri(event.params), \n                \"TrainingInputMode\":event.params.inputmode\n              },\n              \"OutputDataConfig\": { \n                'S3OutputPath':`s3://${event.params.artifactbucket}`, \n              },\n              \"ResourceConfig\": { \n                \"InstanceCount\": event.params.traininstancecount, \n                \"InstanceType\": event.params.traininstancetype, \n                \"VolumeSizeInGB\":parseInt(event.params.trainvolumesize), \n              },\n              \"RoleArn\":event[\"params\"][\"trainingrole\"], \n              \"StoppingCondition\": { \n                \"MaxRuntimeInSeconds\":parseInt(event.params.trainmaxrun)*60*60\n              },\n              \"TrainingJobName\":`${event.params.name}-${event.params.id}`, \n              \"HyperParameters\":Hyperparameters,\n              \"Tags\": []\n            })\n        })\n        .catch(x=>callback(new Error(x)))\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n\nfunction create_image_uri(params){\n    var account='520713654638'\n    var instance=params.traininstancetype.split('.')[1][0]===\"p\" ? \"gpu\" : \"cpu\"\n    return `${account}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/sagemaker-tensorflow:${params.tensorflowversion}-${instance}-${params.pyversion}`\n}\n",
                          "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \n\nexports.handler=function(event,context,callback){\n    console.log(JSON.stringify(event,null,2))\n\n    try{\n        image=event.params.TrainingImage || `${event.params.accountid}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com/${event.params.ecrrepo}:Training_v${event.params.version}`\n\n        var Hyperparameters=Object.assign({\n            sagemaker_job_name:`\"${event.params.name}-${event.params.id}\"`,\n            sagemaker_region:`\"${process.env.AWS_REGION}\"`,\n            checkpoint_path:`\"s3://${event.params.checkpointbucket}/${event.params.name}-${event.params.id}/checkpoints\"`,\n        },event.params.hyperparameters)\n\n        callback(null,{\n          \"AlgorithmSpecification\": { \n            \"TrainingImage\":image, \n            \"TrainingInputMode\":event[\"params\"][\"inputmode\"]\n          },\n          \"InputDataConfig\": [ \n            {\n              \"ChannelName\": \"training\", \n              \"DataSource\": { \n                \"S3DataSource\": { \n                  \"S3DataType\": \"S3Prefix\", \n                  \"S3Uri\":`s3://${event['params']['databucket']}/train/`, \n                  \"S3DataDistributionType\": \"FullyReplicated\" \n                }\n              },\n              \"CompressionType\": \"None\",\n              \"RecordWrapperType\": \"None\" \n            },\n          ],\n          \"OutputDataConfig\": { \n            'S3OutputPath':`s3://${event['params']['artifactbucket']}`, \n          },\n          \"ResourceConfig\": { \n            \"InstanceCount\": event[\"params\"][\"traininstancecount\"], \n            \"InstanceType\": event[\"params\"][\"traininstancetype\"], \n            \"VolumeSizeInGB\": parseInt(event[\"params\"][\"trainvolumesize\"]), \n          },\n          \"RoleArn\":event[\"params\"][\"trainingrole\"], \n          \"StoppingCondition\": { \n            \"MaxRuntimeInSeconds\":parseInt(event[\"params\"][\"trainmaxrun\"])*60*60\n          },\n          \"TrainingJobName\":`${event.params.name}-${event.params.id}`, \n          \"HyperParameters\":Hyperparameters,\n          \"Tags\": []\n        })\n    }catch(e){\n        callback(new Error(e))\n    }\n}\n"
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigFrameworkAMAZON",
            "nodejs6.10",
            {
              "Fn::If": [
                "ConfigFrameworkBYOD",
                "nodejs6.10",
                {
                  "Fn::If": [
                    "ConfigFrameworkMXNET",
                    "nodejs6.10",
                    {
                      "Fn::If": [
                        "ConfigFrameworkTENSORFLOW",
                        "nodejs6.10",
                        "nodejs6.10"
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaBuildStatusInference": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(JSON.stringify(event,null,2))\n    codebuild.batchGetBuilds({\n        ids:[event.outputs.build.Inference.id] \n    }).promise()\n    .then(result=>cb(null,result.builds[0]))\n    .catch(x=>{\n        console.log(x)\n        cb(new Error(x))\n    })\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(JSON.stringify(event,null,2))\n    codebuild.batchGetBuilds({\n        ids:[event.outputs.build.Inference.id] \n    }).promise()\n    .then(result=>cb(null,result.builds[0]))\n    .catch(x=>{\n        console.log(x)\n        cb(new Error(x))\n    })\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaBuildStatusTraining": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(JSON.stringify(event,null,2))\n    codebuild.batchGetBuilds({\n        ids:[event.outputs.build.Training.id] \n    }).promise()\n    .then(result=>cb(null,result.builds[0]))\n    .catch(x=>{\n        console.log(x)\n        cb(new Error(x))\n    })\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(JSON.stringify(event,null,2))\n    codebuild.batchGetBuilds({\n        ids:[event.outputs.build.Training.id] \n    }).promise()\n    .then(result=>cb(null,result.builds[0]))\n    .catch(x=>{\n        console.log(x)\n        cb(new Error(x))\n    })\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaCreateEndpointConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    var args=Object.assign({\n        EndpointConfigName:`${event.params.name}-${event.params.id}`,\n        Tags:[]\n    },event.args.endpoint) \n    \n    if(event.params.models[0]){\n        args.Tags.push({\n            Key:\"sagebuild:previous\",Value:event.params.models[0]\n        })\n    }\n    sagemaker.createEndpointConfig(args).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    var args=Object.assign({\n        EndpointConfigName:`${event.params.name}-${event.params.id}`,\n        Tags:[]\n    },event.args.endpoint) \n    \n    if(event.params.models[0]){\n        args.Tags.push({\n            Key:\"sagebuild:previous\",Value:event.params.models[0]\n        })\n    }\n    sagemaker.createEndpointConfig(args).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaCreateModel": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    sagemaker.createModel(event.args.model).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    sagemaker.createModel(event.args.model).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaDeleteEndpoint": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar crypto=require('crypto')\nvar hash=crypto.randomBytes(8).toString('base64').replace('=','')\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    return sagemaker.deleteEndpoint({\n        EndpointName:event.params.endpointname\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar crypto=require('crypto')\nvar hash=crypto.randomBytes(8).toString('base64').replace('=','')\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    return sagemaker.deleteEndpoint({\n        EndpointName:event.params.endpointname\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaDeleteEndpointConfig": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var name=event.outputs.endpoint.EndpointConfigArn.match(\n            /arn:aws:sagemaker:.*:.*:endpoint-config\\/(.*)/)[1]\n   \n    sagemaker.deleteEndpointConfig({\n        EndpointConfigName:name\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var name=event.outputs.endpoint.EndpointConfigArn.match(\n            /arn:aws:sagemaker:.*:.*:endpoint-config\\/(.*)/)[1]\n   \n    sagemaker.deleteEndpointConfig({\n        EndpointConfigName:name\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaDeleteModel": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    sagemaker.deleteModel({ModelName:event.args.model.ModelName}).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    sagemaker.deleteModel({ModelName:event.args.model.ModelName}).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaDeployCheck": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\nvar ssm=new aws.SSM()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    try{\n        var deployedName=event.status.endpoint.EndpointConfigName \n        var configArn=event.outputs.endpoint.EndpointConfigArn\n        var configName=configArn.match(/arn:aws:sagemaker:.*:.*:endpoint-config\\/(.*)/)[1]\n        var success=deployedName.toLowerCase()===configName.toLowerCase()\n        cb(null,success)\n    }catch(x){\n        cb(new Error(x))\n    }\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\nvar ssm=new aws.SSM()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    try{\n        var deployedName=event.status.endpoint.EndpointConfigName \n        var configArn=event.outputs.endpoint.EndpointConfigArn\n        var configName=configArn.match(/arn:aws:sagemaker:.*:.*:endpoint-config\\/(.*)/)[1]\n        var success=deployedName.toLowerCase()===configName.toLowerCase()\n        cb(null,success)\n    }catch(x){\n        cb(new Error(x))\n    }\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaEndpointStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    try{ \n        sagemaker.describeEndpoint({\n            EndpointName:event.params.endpointname\n        }).promise()\n        .then(result=>{\n            cb(null,result)\n        })\n        .catch(function(error){\n            console.log(error)\n            if(error.message.match(/Could not find endpoint/)){\n                cb(null,{EndpointStatus:\"Empty\"})\n            }else{\n                cb(new Error(error))\n            }\n        })\n    }catch(e){\n        console.log(e)\n        cb(new Error(e))\n    }\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    try{ \n        sagemaker.describeEndpoint({\n            EndpointName:event.params.endpointname\n        }).promise()\n        .then(result=>{\n            cb(null,result)\n        })\n        .catch(function(error){\n            console.log(error)\n            if(error.message.match(/Could not find endpoint/)){\n                cb(null,{EndpointStatus:\"Empty\"})\n            }else{\n                cb(new Error(error))\n            }\n        })\n    }catch(e){\n        console.log(e)\n        cb(new Error(e))\n    }\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaGetArtifact": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var model=event.params.models[0]\n    sagemaker.describeModel({\n        ModelName:model\n    }).promise()\n    .then(result=>{\n        event.status.training={\n            ModelArtifacts:{\n                S3ModelArtifacts:result.PrimaryContainer.ModelDataUrl\n            }\n        }\n    })\n    sagemaker.createModel(event.args.model).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var model=event.params.models[0]\n    sagemaker.describeModel({\n        ModelName:model\n    }).promise()\n    .then(result=>{\n        event.status.training={\n            ModelArtifacts:{\n                S3ModelArtifacts:result.PrimaryContainer.ModelDataUrl\n            }\n        }\n    })\n    sagemaker.createModel(event.args.model).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaHPOStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n\n    sagemaker.describeHyperParameterTuningJob({\n        HyperParameterTuningJobName:event.outputs.training.HyperParameterTuningJobArn.split('/')[1]\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n\n    sagemaker.describeHyperParameterTuningJob({\n        HyperParameterTuningJobName:event.outputs.training.HyperParameterTuningJobArn.split('/')[1]\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaInitialize": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\nvar ssm=new aws.SSM()\n\n\n\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    try{\n        Promise.all([\n            ssm.getParameter({\n                Name:process.env.PARAMETERSTORE\n            }).promise(),\n            ssm.getParameter({\n                Name:process.env.VERSIONPARAMETERSTORE\n            }).promise()\n        ])\n        .then(function(results){\n            console.log(JSON.stringify(results,null,2))\n            \n            var params=JSON.parse(results[0].Parameter.Value)\n            var version=(parseInt(results[1].Parameter.Value)+1).toString()\n            if(params.TrainingImage){\n                params.build.Training=false\n            }\n            if(params.InferenceImage){\n                params.build.Inference=false\n            }\n            var name=`${params.stackname}-v${version}`\n            Object.assign(event,params,{\n                timestamp:new Date(),\n                version,\n                id:Date.now().toString(),\n                name,\n                TrainingTag:`${name}-Training`,\n                InferenceTag:`${name}-Inference`\n            })\n            cb(null,{\n                params:event,\n                args:{\n                    build:{\n                        Training:{},\n                        Inference:{}\n                    },\n                    training:{},\n                    endpoint:{}\n                },\n                outputs:{\n                    build:{\n                        Training:{},\n                        Inference:{}\n                    },\n                    training:{},\n                    endpoint:{}\n                },\n                status:{\n                    endpoint:{},\n                    training:{},\n                    build:{\n                        Training:{},\n                        Inference:{}\n                    }\n                }\n            })\n        })\n        .catch(x=>cb(new Error(x)))\n    }catch(x){\n        cb(new Error(x))\n    }\n}\n\nfunction addZeroBefore(n) {\n  return (n < 10 ? '0' : '') + n;\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\nvar ssm=new aws.SSM()\n\n\n\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    try{\n        Promise.all([\n            ssm.getParameter({\n                Name:process.env.PARAMETERSTORE\n            }).promise(),\n            ssm.getParameter({\n                Name:process.env.VERSIONPARAMETERSTORE\n            }).promise()\n        ])\n        .then(function(results){\n            console.log(JSON.stringify(results,null,2))\n            \n            var params=JSON.parse(results[0].Parameter.Value)\n            var version=(parseInt(results[1].Parameter.Value)+1).toString()\n            if(params.TrainingImage){\n                params.build.Training=false\n            }\n            if(params.InferenceImage){\n                params.build.Inference=false\n            }\n            var name=`${params.stackname}-v${version}`\n            Object.assign(event,params,{\n                timestamp:new Date(),\n                version,\n                id:Date.now().toString(),\n                name,\n                TrainingTag:`${name}-Training`,\n                InferenceTag:`${name}-Inference`\n            })\n            cb(null,{\n                params:event,\n                args:{\n                    build:{\n                        Training:{},\n                        Inference:{}\n                    },\n                    training:{},\n                    endpoint:{}\n                },\n                outputs:{\n                    build:{\n                        Training:{},\n                        Inference:{}\n                    },\n                    training:{},\n                    endpoint:{}\n                },\n                status:{\n                    endpoint:{},\n                    training:{},\n                    build:{\n                        Training:{},\n                        Inference:{}\n                    }\n                }\n            })\n        })\n        .catch(x=>cb(new Error(x)))\n    }catch(x){\n        cb(new Error(x))\n    }\n}\n\nfunction addZeroBefore(n) {\n  return (n < 10 ? '0' : '') + n;\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaListModels": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    return sagemaker.listModels({\n        NameContains:event.params.stackname,\n        SortBy:\"CreationTime\",\n        SortOrder:\"Descending\"\n    }).promise()\n    .then(result=>{\n        cb(null,result.Models.map(x=>x.ModelName))\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    return sagemaker.listModels({\n        NameContains:event.params.stackname,\n        SortBy:\"CreationTime\",\n        SortOrder:\"Descending\"\n    }).promise()\n    .then(result=>{\n        cb(null,result.Models.map(x=>x.ModelName))\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaNotificationFail": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sns=new aws.SNS()\nvar result=\"Failed\"\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n  \n    sns.publish({\n        TopicArn:event.params.statustopic,\n        Subject:`SageBuild ${result}`,\n        Message:JSON.stringify({\n            Result:\"Fail\",\n            StackName:event.params.stackname,\n            Name:event.params.name,\n            Date:new Date(),\n            Error:event.error\n        },null,2),\n        MessageAttributes:{\n            event:{\n                DataType:\"String\",\n                StringValue:JSON.stringify(event)\n            }\n        }\n    }).promise()\n    .then(result=>{\n        cb(null,{})\n    })\n    .catch(cb)\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sns=new aws.SNS()\nvar result=\"Failed\"\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n  \n    sns.publish({\n        TopicArn:event.params.statustopic,\n        Subject:`SageBuild ${result}`,\n        Message:JSON.stringify({\n            Result:\"Fail\",\n            StackName:event.params.stackname,\n            Name:event.params.name,\n            Date:new Date(),\n            Error:event.error\n        },null,2),\n        MessageAttributes:{\n            event:{\n                DataType:\"String\",\n                StringValue:JSON.stringify(event)\n            }\n        }\n    }).promise()\n    .then(result=>{\n        cb(null,{})\n    })\n    .catch(cb)\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaNotificationSuccess": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sns=new aws.SNS()\naws.config.region=process.env.AWS_REGION \nvar ssm=new aws.SSM()\n\nvar result=\"Success\"\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n  \n    Promise.all([\n        sns.publish({\n            TopicArn:event.params.statustopic,\n            Subject:`SageBuild ${result}`,\n            Message:`Training ${result}. \n                StackName:${event.params.stackname} \n                Name:${event.params.name}\n                Date:${new Date()}\n            `,\n            MessageAttributes:{\n                event:{\n                    DataType:\"String\",\n                    StringValue:JSON.stringify(event)\n                }\n            }\n        }).promise(),\n        ssm.putParameter({\n            Name:process.env.VERSIONPARAMETERSTORE,\n            Type:\"String\",\n            Value:event.params.version,\n            Overwrite:true\n        }).promise()\n    ])\n    .then(result=>{\n        cb(null,{})\n    })\n    .catch(cb)\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sns=new aws.SNS()\naws.config.region=process.env.AWS_REGION \nvar ssm=new aws.SSM()\n\nvar result=\"Success\"\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n  \n    Promise.all([\n        sns.publish({\n            TopicArn:event.params.statustopic,\n            Subject:`SageBuild ${result}`,\n            Message:`Training ${result}. \n                StackName:${event.params.stackname} \n                Name:${event.params.name}\n                Date:${new Date()}\n            `,\n            MessageAttributes:{\n                event:{\n                    DataType:\"String\",\n                    StringValue:JSON.stringify(event)\n                }\n            }\n        }).promise(),\n        ssm.putParameter({\n            Name:process.env.VERSIONPARAMETERSTORE,\n            Type:\"String\",\n            Value:event.params.version,\n            Overwrite:true\n        }).promise()\n    ])\n    .then(result=>{\n        cb(null,{})\n    })\n    .catch(cb)\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaStartBuildInference": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    codebuild.startBuild({\n        projectName:event.params.projectname,\n        environmentVariablesOverride:[{\n            name:\"IMAGE_TAG\",\n            value:`Inference_v${event.params.version}`\n        },{\n            name:\"DOCKERFILE_PATH\",\n            value:event.params[`dockerfile_path_Inference`]\n        }]\n    }).promise()\n    .then(result=>cb(null,result.build))\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    codebuild.startBuild({\n        projectName:event.params.projectname,\n        environmentVariablesOverride:[{\n            name:\"IMAGE_TAG\",\n            value:`Inference_v${event.params.version}`\n        },{\n            name:\"DOCKERFILE_PATH\",\n            value:event.params[`dockerfile_path_Inference`]\n        }]\n    }).promise()\n    .then(result=>cb(null,result.build))\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaStartBuildTraining": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    codebuild.startBuild({\n        projectName:event.params.projectname,\n        environmentVariablesOverride:[{\n            name:\"IMAGE_TAG\",\n            value:`Training_v${event.params.version}`\n        },{\n            name:\"DOCKERFILE_PATH\",\n            value:event.params[`dockerfile_path_Training`]\n        }]\n    }).promise()\n    .then(result=>cb(null,result.build))\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar codebuild=new aws.CodeBuild()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    codebuild.startBuild({\n        projectName:event.params.projectname,\n        environmentVariablesOverride:[{\n            name:\"IMAGE_TAG\",\n            value:`Training_v${event.params.version}`\n        },{\n            name:\"DOCKERFILE_PATH\",\n            value:event.params[`dockerfile_path_Training`]\n        }]\n    }).promise()\n    .then(result=>cb(null,result.build))\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaStartHPO": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar crypto = require('crypto');\nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var shasum = crypto.createHash('sha1');\n    try{\n        event.args.training.Tags=event.args.training.Tags || []\n        event.args.training.Tags.push({\n            Key:\"sagebuild:BuildStack\",\n            Value:event.params.stackname\n        })\n        hyperParams={\n            static:{},\n            catagorical:[],\n            continuous:[],\n            integer:[]\n        }\n        old_args=event.args.training\n        Object.keys(old_args.HyperParameters).forEach(function(key){\n            val=old_args.HyperParameters[key]\n            try{\n                parsed=JSON.parse(val)\n            }catch(e){\n                parsed=val     \n            }\n\n            if(typeof(parsed)===\"object\"){\n                parsed.Name=key\n                if(parsed.Values){\n                    hyperParams.catagorical.push(parsed)\n                }else if(typeof(parsed.MaxValue)!==\"undefined\"){\n                    if(parsed.integer){\n                        delete parsed.integer\n                        hyperParams.integer.push(parsed)\n                    }else{\n                        delete parsed.integer\n                        hyperParams.continuous.push(parsed)\n                    }\n                }else{\n                    hyperParams.static[key]=val\n                }\n            }else{\n                hyperParams.static[key]=val\n            }\n        })\n        shasum.update(old_args.TrainingJobName);\n\n        args={\n            HyperParameterTuningJobConfig:{\n                HyperParameterTuningJobObjective:{\n                    MetricName:event.params.tuningobjective.Name,\n                    Type:event.params.tuningobjective.Type\n                },\n                ParameterRanges:{\n                    CategoricalParameterRanges:hyperParams.catagorical,\n                    ContinuousParameterRanges:hyperParams.continuous,\n                    IntegerParameterRanges:hyperParams.integer\n                },\n                ResourceLimits:{\n                    MaxNumberOfTrainingJobs:event.params.maxtrainingjobs,\n                    MaxParallelTrainingJobs:event.params.maxparalleltrainingjobs,\n                },\n                Strategy:\"Bayesian\"\n            },\n            HyperParameterTuningJobName:shasum.digest('hex').slice(0,32),\n            TrainingJobDefinition:{\n                AlgorithmSpecification:{\n                    TrainingImage:old_args.AlgorithmSpecification.TrainingImage,\n                    TrainingInputMode:old_args.AlgorithmSpecification.TrainingInputMode\n                },\n                InputDataConfig:old_args.InputDataConfig,\n                OutputDataConfig:old_args.OutputDataConfig,\n                ResourceConfig:old_args.ResourceConfig,\n                RoleArn:old_args.RoleArn,\n                StoppingCondition:old_args.StoppingCondition,\n                StaticHyperParameters:hyperParams.static,\n            },\n            Tags:old_args.Tags\n        }\n        if(event.params.tuningobjective.Regex){\n            args.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions=[{\n                Name:event.params.tuningobjective.Name,\n                Regex:event.params.tuningobjective.Regex\n            }]\n        }\n        console.log(JSON.stringify(args,null,2))\n        sagemaker.createHyperParameterTuningJob(args).promise()\n        .then(result=>cb(null,result))\n        .catch(x=>cb(new Error(x)))\n    }catch(e){\n        cb(new Error(e))\n    }\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar crypto = require('crypto');\nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    var shasum = crypto.createHash('sha1');\n    try{\n        event.args.training.Tags=event.args.training.Tags || []\n        event.args.training.Tags.push({\n            Key:\"sagebuild:BuildStack\",\n            Value:event.params.stackname\n        })\n        hyperParams={\n            static:{},\n            catagorical:[],\n            continuous:[],\n            integer:[]\n        }\n        old_args=event.args.training\n        Object.keys(old_args.HyperParameters).forEach(function(key){\n            val=old_args.HyperParameters[key]\n            try{\n                parsed=JSON.parse(val)\n            }catch(e){\n                parsed=val     \n            }\n\n            if(typeof(parsed)===\"object\"){\n                parsed.Name=key\n                if(parsed.Values){\n                    hyperParams.catagorical.push(parsed)\n                }else if(typeof(parsed.MaxValue)!==\"undefined\"){\n                    if(parsed.integer){\n                        delete parsed.integer\n                        hyperParams.integer.push(parsed)\n                    }else{\n                        delete parsed.integer\n                        hyperParams.continuous.push(parsed)\n                    }\n                }else{\n                    hyperParams.static[key]=val\n                }\n            }else{\n                hyperParams.static[key]=val\n            }\n        })\n        shasum.update(old_args.TrainingJobName);\n\n        args={\n            HyperParameterTuningJobConfig:{\n                HyperParameterTuningJobObjective:{\n                    MetricName:event.params.tuningobjective.Name,\n                    Type:event.params.tuningobjective.Type\n                },\n                ParameterRanges:{\n                    CategoricalParameterRanges:hyperParams.catagorical,\n                    ContinuousParameterRanges:hyperParams.continuous,\n                    IntegerParameterRanges:hyperParams.integer\n                },\n                ResourceLimits:{\n                    MaxNumberOfTrainingJobs:event.params.maxtrainingjobs,\n                    MaxParallelTrainingJobs:event.params.maxparalleltrainingjobs,\n                },\n                Strategy:\"Bayesian\"\n            },\n            HyperParameterTuningJobName:shasum.digest('hex').slice(0,32),\n            TrainingJobDefinition:{\n                AlgorithmSpecification:{\n                    TrainingImage:old_args.AlgorithmSpecification.TrainingImage,\n                    TrainingInputMode:old_args.AlgorithmSpecification.TrainingInputMode\n                },\n                InputDataConfig:old_args.InputDataConfig,\n                OutputDataConfig:old_args.OutputDataConfig,\n                ResourceConfig:old_args.ResourceConfig,\n                RoleArn:old_args.RoleArn,\n                StoppingCondition:old_args.StoppingCondition,\n                StaticHyperParameters:hyperParams.static,\n            },\n            Tags:old_args.Tags\n        }\n        if(event.params.tuningobjective.Regex){\n            args.TrainingJobDefinition.AlgorithmSpecification.MetricDefinitions=[{\n                Name:event.params.tuningobjective.Name,\n                Regex:event.params.tuningobjective.Regex\n            }]\n        }\n        console.log(JSON.stringify(args,null,2))\n        sagemaker.createHyperParameterTuningJob(args).promise()\n        .then(result=>cb(null,result))\n        .catch(x=>cb(new Error(x)))\n    }catch(e){\n        cb(new Error(e))\n    }\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaStartTraining": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    event.args.training.Tags=event.args.training.Tags || []\n    event.args.training.Tags.push({\n        Key:\"sagebuild:BuildStack\",\n        Value:event.params.stackname\n    })\n\n    sagemaker.createTrainingJob(event.args.training).promise()\n    .then(result=>cb(null,result))\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    event.args.training.Tags=event.args.training.Tags || []\n    event.args.training.Tags.push({\n        Key:\"sagebuild:BuildStack\",\n        Value:event.params.stackname\n    })\n\n    sagemaker.createTrainingJob(event.args.training).promise()\n    .then(result=>cb(null,result))\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaTrainingStatus": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    sagemaker.describeTrainingJob({\n        TrainingJobName:event.args.training.TrainingJobName\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    sagemaker.describeTrainingJob({\n        TrainingJobName:event.args.training.TrainingJobName\n    }).promise()\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "StepLambdaUpdateEndpoint": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables": {
            "PARAMETERSTORE": {
              "Ref": "ParameterStore"
            },
            "VERSIONPARAMETERSTORE": {
              "Ref": "VersionParameterStore"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::If": [
              "ConfigDeploySAGEMAKER",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar crypto=require('crypto')\nvar hash=crypto.randomBytes(8).toString('base64').replace('=','')\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n        \n    return sagemaker.describeEndpoint({\n        EndpointName:event.params.endpointname\n    }).promise()\n    .then(()=>true)\n    .catch(error=>{\n        if(error.message.match(/Could not find/)){\n            return false\n        }else{\n            throw error\n        }\n    })\n    .then(function(exists){\n        var name=event.outputs.endpoint.EndpointConfigArn.match(\n            /arn:aws:sagemaker:.*:.*:endpoint-config\\/(.*)/)[1]\n        if(exists){\n            return sagemaker.updateEndpoint({\n                EndpointName:event.params.endpointname,\n                EndpointConfigName:name,\n            }).promise()\n        }else{\n            return sagemaker.createEndpoint({\n                EndpointName:event.params.endpointname,\n                EndpointConfigName:name,\n            }).promise()\n        }\n    })\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n",
              "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\nvar crypto=require('crypto')\nvar hash=crypto.randomBytes(8).toString('base64').replace('=','')\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n        \n    return sagemaker.describeEndpoint({\n        EndpointName:event.params.endpointname\n    }).promise()\n    .then(()=>true)\n    .catch(error=>{\n        if(error.message.match(/Could not find/)){\n            return false\n        }else{\n            throw error\n        }\n    })\n    .then(function(exists){\n        var name=event.outputs.endpoint.EndpointConfigArn.match(\n            /arn:aws:sagemaker:.*:.*:endpoint-config\\/(.*)/)[1]\n        if(exists){\n            return sagemaker.updateEndpoint({\n                EndpointName:event.params.endpointname,\n                EndpointConfigName:name,\n            }).promise()\n        }else{\n            return sagemaker.createEndpoint({\n                EndpointName:event.params.endpointname,\n                EndpointConfigName:name,\n            }).promise()\n        }\n    })\n    .then(result=>{\n        cb(null,result)\n    })\n    .catch(x=>cb(new Error(x)))\n}\n"
            ]
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "StepLambdaRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Fn::If": [
            "ConfigDeploySAGEMAKER",
            "nodejs6.10",
            "nodejs6.10"
          ]
        },
        "Timeout": 60
      }
    },
    "SageBuildLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "StepLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:Get*",
                    "ssm:Put*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterStore}"
                    },
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${VersionParameterStore}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "CodeBucket",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": "${CodeBucket.Arn}/*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "StateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::If": [
            "StateMachineDockerTrainDeploy",
            {
              "Fn::Sub": "{\"Comment\":\"\",\"StartAt\":\"start\",\"States\":{\"IfBuildTraining\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.params.build.Training\",\"BooleanEquals\":false,\"Next\":\"EndBuildTraining\"},{\"Variable\":\"$.params.build.Training\",\"BooleanEquals\":true,\"Next\":\"buildImageTraining\"}],\"Default\":\"buildImageTraining\"},\"buildImageTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaStartBuildTraining.Arn}\",\"ResultPath\":\"$.outputs.build.Training\",\"Next\":\"waitTraining\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"waitTraining\":{\"Type\":\"Wait\",\"Seconds\":5,\"Next\":\"buildStatusTraining\"},\"buildStatusTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaBuildStatusTraining.Arn}\",\"ResultPath\":\"$.status.build.Training\",\"Next\":\"checkImageTraining\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"checkImageTraining\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.status.build.Training.buildStatus\",\"StringEquals\":\"IN_PROGRESS\",\"Next\":\"waitTraining\"},{\"Variable\":\"$.status.build.Training.buildStatus\",\"StringEquals\":\"SUCCEEDED\",\"Next\":\"EndBuildTraining\"}],\"Default\":\"FailBuildNotificationTraining\"},\"EndBuildTraining\":{\"Type\":\"Pass\",\"Next\":\"IfHPO\"},\"FailBuildNotificationTraining\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"IfTrain\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.params.train\",\"BooleanEquals\":true,\"Next\":\"getTrainingConfig\"},{\"Variable\":\"$.params.train\",\"BooleanEquals\":false,\"Next\":\"getModelConfig\"},{\"Variable\":\"$.params.skiptrain\",\"BooleanEquals\":true,\"Next\":\"getArtifact\"}],\"Default\":\"getTrainingConfig\"},\"getArtifact\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaGetArtifact.Arn}\",\"Next\":\"getModelConfig\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"getTrainingConfig\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${LambdaVariables.TrainingConfig}\",\"ResultPath\":\"$.args.training\",\"Next\":\"getDataConfig\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"getDataConfig\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaGetDataConfig.Arn}\",\"ResultPath\":\"$.args.training.InputDataConfig\",\"Next\":\"IfBuildTraining\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"IfHPO\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.params.configtrain\",\"StringEquals\":\"SAGEMAKER\",\"Next\":\"StartTraining\"},{\"Variable\":\"$.params.configtrain\",\"StringEquals\":\"SAGEMAKERHPO\",\"Next\":\"StartHPO\"}],\"Default\":\"StartTraining\"},\"StartTraining\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${StepLambdaStartTraining.Arn}\",\"ResultPath\":\"$.outputs.training\",\"Next\":\"waitForTraining\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"StartHPO\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${StepLambdaStartHPO.Arn}\",\"ResultPath\":\"$.outputs.training\",\"Next\":\"waitForTraining\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"waitForTraining\":{\"Type\":\"Wait\",\"Seconds\":30,\"Next\":\"IfHPOStatus\"},\"IfHPOStatus\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.params.configtrain\",\"StringEquals\":\"SAGEMAKER\",\"Next\":\"getTrainingStatus\"},{\"Variable\":\"$.params.configtrain\",\"StringEquals\":\"SAGEMAKERHPO\",\"Next\":\"getHPOStatus\"}],\"Default\":\"getHPOStatus\"},\"getTrainingStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaTrainingStatus.Arn}\",\"ResultPath\":\"$.status.training\",\"Next\":\"checkTrainingStatus\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"getHPOStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaHPOStatus.Arn}\",\"ResultPath\":\"$.status.training\",\"Next\":\"checkHPOStatus\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"checkTrainingStatus\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.status.training.TrainingJobStatus\",\"StringEquals\":\"InProgress\",\"Next\":\"waitForTraining\"},{\"Variable\":\"$.status.training.TrainingJobStatus\",\"StringEquals\":\"Completed\",\"Next\":\"getModelConfig\"}],\"Default\":\"trainingFail\"},\"checkHPOStatus\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.status.training.HyperParameterTuningJobStatus\",\"StringEquals\":\"InProgress\",\"Next\":\"waitForTraining\"},{\"Variable\":\"$.status.training.HyperParameterTuningJobStatus\",\"StringEquals\":\"Completed\",\"Next\":\"getModelConfig\"}],\"Default\":\"trainingFail\"},\"trainingFail\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"rollback\":{\"Type\":\"Parallel\",\"ResultPath\":\"$.outputs.rollback\",\"Next\":\"endpointFail\",\"Branches\":[{\"StartAt\":\"shouldDeleteEndpoint\",\"States\":{\"shouldDeleteEndpoint\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"Failed\"}],\"Next\":\"endpointDelete\"},{\"Or\":[{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"InService\"},{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"RollingBack\"}],\"Next\":\"endDelete\"}],\"Default\":\"endDelete\"},\"endpointDelete\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaDeleteEndpoint.Arn}\",\"ResultPath\":\"$.status.endpointdelete\",\"Next\":\"endpointDeleteStatus\"},\"endpointDeleteStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaEndpointStatus.Arn}\",\"ResultPath\":\"$.status.endpoint\",\"Next\":\"waitForDelete\"},\"waitForDelete\":{\"Type\":\"Wait\",\"Seconds\":10,\"Next\":\"endpointDeleteCheck\"},\"endpointDeleteCheck\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"Deleting\"},{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"Failed\"}],\"Next\":\"endpointDeleteStatus\"},{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"Empty\",\"Next\":\"endDelete\"}],\"Default\":\"endDelete\"},\"endDelete\":{\"Type\":\"Pass\",\"End\":true}}},{\"StartAt\":\"deleteEndpointConfig\",\"States\":{\"deleteEndpointConfig\":{\"Type\":\"Task\",\"End\":true,\"Resource\":\"${StepLambdaDeleteEndpointConfig.Arn}\",\"ResultPath\":\"$.outputs.deleteEndpointConfig\"}}},{\"StartAt\":\"deleteModel\",\"States\":{\"deleteModel\":{\"Type\":\"Task\",\"End\":true,\"Resource\":\"${StepLambdaDeleteModel.Arn}\",\"ResultPath\":\"$.outputs.deleteModel\"}}}],\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"IfBuildInference\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.params.build.Inference\",\"BooleanEquals\":false,\"Next\":\"EndBuildInference\"},{\"Variable\":\"$.params.build.Inference\",\"BooleanEquals\":true,\"Next\":\"buildImageInference\"}],\"Default\":\"buildImageInference\"},\"buildImageInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaStartBuildInference.Arn}\",\"ResultPath\":\"$.outputs.build.Inference\",\"Next\":\"waitInference\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"waitInference\":{\"Type\":\"Wait\",\"Seconds\":5,\"Next\":\"buildStatusInference\"},\"buildStatusInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaBuildStatusInference.Arn}\",\"ResultPath\":\"$.status.build.Inference\",\"Next\":\"checkImageInference\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"checkImageInference\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.status.build.Inference.buildStatus\",\"StringEquals\":\"IN_PROGRESS\",\"Next\":\"waitInference\"},{\"Variable\":\"$.status.build.Inference.buildStatus\",\"StringEquals\":\"SUCCEEDED\",\"Next\":\"EndBuildInference\"}],\"Default\":\"FailBuildNotificationInference\"},\"EndBuildInference\":{\"Type\":\"Pass\",\"Next\":\"createModel\"},\"FailBuildNotificationInference\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"getModelConfig\":{\"Type\":\"Task\",\"Resource\":\"${LambdaVariables.ModelConfig}\",\"ResultPath\":\"$.args.model\",\"Next\":\"IfBuildInference\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"createModel\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaCreateModel.Arn}\",\"ResultPath\":\"$.outputs.models\",\"Next\":\"getEndpointConfig\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"getEndpointConfig\":{\"Type\":\"Task\",\"InputPath\":\"$\",\"Resource\":\"${LambdaVariables.EndpointConfig}\",\"ResultPath\":\"$.args.endpoint\",\"Next\":\"createEndpointConfig\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"createEndpointConfig\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaCreateEndpointConfig.Arn}\",\"ResultPath\":\"$.outputs.endpoint\",\"Next\":\"updateEndpoint\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"updateEndpoint\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaUpdateEndpoint.Arn}\",\"ResultPath\":\"$.outputs.deploy\",\"Next\":\"waitForEndpoint\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"waitForEndpoint\":{\"Type\":\"Wait\",\"Seconds\":10,\"Next\":\"endpointStatus\"},\"endpointStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaEndpointStatus.Arn}\",\"ResultPath\":\"$.status.endpoint\",\"Next\":\"endpointCheck\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"endpointCheck\":{\"Type\":\"Choice\",\"Choices\":[{\"Or\":[{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"Creating\"},{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"Updating\"},{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"RollingBack\"}],\"Next\":\"waitForEndpoint\"},{\"Or\":[{\"Variable\":\"$.status.endpoint.EndpointStatus\",\"StringEquals\":\"InService\"}],\"Next\":\"DeployStatus\"}],\"Default\":\"rollback\"},\"DeployStatus\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaDeployCheck.Arn}\",\"ResultPath\":\"$.status.deployment\",\"Next\":\"DeployCheck\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"DeployCheck\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.status.deployment\",\"BooleanEquals\":true,\"Next\":\"Success\"},{\"Variable\":\"$.status.deployment\",\"BooleanEquals\":false,\"Next\":\"rollback\"}],\"Default\":\"rollback\"},\"endpointFail\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"start\":{\"Type\":\"Pass\",\"Next\":\"initialize\"},\"initialize\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaInitialize.Arn}\",\"Next\":\"listmodels\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"listmodels\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaListModels.Arn}\",\"ResultPath\":\"$.params.models\",\"Next\":\"IfTrain\",\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"Success\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationSuccess.Arn}\",\"End\":true,\"Catch\":[{\"ErrorEquals\":[\"States.ALL\"],\"ResultPath\":\"$.error\",\"Next\":\"Error\"}]},\"Error\":{\"Type\":\"Task\",\"Resource\":\"${StepLambdaNotificationFail.Arn}\",\"Next\":\"Fail\"},\"Fail\":{\"Type\":\"Fail\"}}}"
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StepFunctionRole",
            "Arn"
          ]
        }
      }
    },
    "RollbackTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Fn::Sub": "${AWS::StackName}-rollback"
        },
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "RollbackLambda",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "RollbackLambdaSNSPolicy": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RollbackLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "RollbackTopic"
        }
      }
    },
    "LaunchTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Fn::Sub": "${AWS::StackName}-launch"
        },
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "LaunchLambda",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "LaunchLambdaSNSPolicy": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LaunchLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "LaunchTopic"
        }
      }
    },
    "ExternalLaunchLambdaSNSPolicy": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "SubscribeToExternalTopic",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LaunchLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ExternalLaunchTopic"
        }
      }
    },
    "ExternalLaunchLambdaSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Condition": "SubscribeToExternalTopic",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "LaunchLambda",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "ExternalLaunchTopic"
        }
      }
    },
    "LaunchTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyTopicPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "S3Access",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "LaunchTopic"
              },
              "Condition": {
                "ArnLike": {
                  "AWS:SourceArn": {
                    "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}"
                  }
                }
              }
            },
            {
              "Sid": "CodeCommit",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "LaunchTopic"
              },
              "Condition": {
                "ArnLike": {
                  "AWS:SourceArn": {
                    "Fn::GetAtt": [
                      "CodeRepo",
                      "Arn"
                    ]
                  }
                }
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "LaunchTopic"
          }
        ]
      }
    },
    "DataBucketSNS": {
      "Type": "Custom::S3Notification",
      "DependsOn": [
        "CFNLambdaPolicy",
        "LaunchTopicPolicy"
      ],
      "Condition": "CreateDataBucket",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3NotificationLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Fn::GetAtt": [
            "Variables",
            "DataBucket"
          ]
        },
        "NotificationConfiguration": {
          "TopicConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "TopicArn": {
                "Ref": "LaunchTopic"
              }
            }
          ]
        }
      }
    },
    "LaunchLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar stepfunctions=new aws.StepFunctions()\n\nexports.handler=function(event,context,callback){\n    console.log('Request:',JSON.stringify(event,null,2))\n    stepfunctions.listExecutions({\n        stateMachineArn:process.env.STATE_MACHINE,\n        statusFilter:\"RUNNING\" \n    }).promise()\n    .then(result=>{\n        if(result.executions.length===0){\n            var message=JSON.parse(event.Records[0].Sns.Message)\n            if(message.Records){  \n                var record=message.Records[0]\n                if(record.codecommit){\n                    var source=\"aws:codecommit\"\n                }else if(record.s3){\n                    var source=record.eventSource\n                }else{\n                    var source=\"custom\"\n                }\n            }else{\n                var record=message\n                var source=\"custom\" \n            }\n            if(message.build){\n                var build=message.build\n            }else{\n                var build={\n                    Inference:![\"MXNET\",\"TENSORFLOW\",\"AMAZON\"]\n                        .includes(process.env.CONFIG_FRAMEWORK),\n                    Training:![\"MXNET\",\"TENSORFLOW\",\"AMAZON\"]\n                        .includes(process.env.CONFIG_FRAMEWORK)\n                }\n            }\n            switch(source){\n                case \"custom\":\n                    var input={\n                        original:message,\n                        train:typeof(record.train) != \"undefined\" ? message.train : true,\n                        build\n                    }\n                    break;\n                case \"aws:s3\":\n                case \"aws:codecommit\":\n                    var input={\n                        build,\n                        train:true\n                    }\n                    break;\n            }\n            var param={\n                stateMachineArn:process.env.STATE_MACHINE,\n                name:`SNS-${event.Records[0].Sns.MessageId}`,\n                input:typeof input === \"string\" ? input : JSON.stringify(input)\n            }\n            console.log(JSON.stringify(param),null,2)\n            return stepfunctions.startExecution(param).promise()\n        }\n    })\n    .then(()=>callback(null))\n}\n"
        },
        "Environment": {
          "Variables": {
            "STATE_MACHINE": {
              "Ref": "StateMachine"
            },
            "DATA_BUCKET": {
              "Fn::GetAtt": [
                "Variables",
                "DataBucket"
              ]
            },
            "CODE_BUCKET": {
              "Ref": "ExternalCodeBucket"
            },
            "CONFIG_FRAMEWORK": {
              "Ref": "ConfigFramework"
            },
            "CONFIG_DEPLOY": {
              "Ref": "ConfigDeploy"
            }
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LaunchLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "RollbackLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION \nvar sagemaker=new aws.SageMaker()\n\nexports.handler=(event,context,cb)=>{\n    console.log(\"EVENT:\",JSON.stringify(event,null,2))\n    \n    return sagemaker.describeEndpoint({\n        EndpointName:process.env.ENDPOINT\n    }).promise()\n    .then(function(result){\n        var config=result.EndpointConfigName\n        return sagemaker.describeEndpointConfig({\n            EndpointConfigName:config\n        }).promise()\n    })\n    .then(function(result){\n        return sagemaker.listTags({\n            ResourceArn:result.EndpointConfigArn\n        }).promise()\n    })\n    .then(function(result){\n        previous=result.Tags.filter(x=>x.Key=\"sagebuild:previous\")[0].Value\n        return sagemaker.updateEndpoint({\n            EndpointConfigName:previous,\n            EndpointName:process.env.ENDPOINT\n        }).promise()\n    })\n    .then(console.log)\n    .then(()=>cb(null))\n    .catch(x=>cb(new Error(x)))\n}\n"
        },
        "Environment": {
          "Variables": {
            "ENDPOINT": {
              "Fn::GetAtt": [
                "Variables",
                "EndpointName"
              ]
            }
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "RollbackLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "RollbackLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        ]
      }
    },
    "LaunchLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
        ]
      }
    },
    "ParameterStore": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Value": {
          "Fn::Sub": "{\"assetbucket\":\"${AssetBucket}\",\"assetprefix\":\"${AssetPrefix}\",\"externaltrainingpolicy\":\"${ExternalTrainingPolicy}\",\"externalhostingpolicy\":\"${ExternalHostingPolicy}\",\"configframework\":\"${ConfigFramework}\",\"configdeploy\":\"${ConfigDeploy}\",\"type\":\"${Type}\",\"notebookinstancetype\":\"${NoteBookInstanceType}\",\"externaldatabucket\":\"${ExternalDataBucket}\",\"externalcodebucket\":\"${ExternalCodeBucket}\",\"externallaunchtopic\":\"${ExternalLaunchTopic}\",\"externalcodecommitrepo\":\"${ExternalCodeCommitRepo}\",\"externalgithubrepo\":\"${ExternalGithubRepo}\",\"endpointconfiglambda\":\"${EndpointConfigLambda}\",\"trainingconfiglambda\":\"${TrainingConfigLambda}\",\"modelconfiglambda\":\"${ModelConfigLambda}\",\"maxtrainingjobs\":1,\"configtrain\":\"SAGEMAKER\",\"maxparalleltrainingjobs\":1,\"checkpointbucket\":\"${CheckPointBucket}\",\"endpointname\":\"${Variables.EndpointName}\",\"stackname\":\"${AWS::StackName}\",\"mxnetversion\":\"1.1\",\"hyperparameters\":{},\"tensorflowversion\":\"1.8\",\"ecrrepo\":\"${ECRRepo}\",\"modelrole\":\"${ModelRole.Arn}\",\"trainingrole\":\"${TrainingRole.Arn}\",\"databucket\":\"${Variables.DataBucket}\",\"artifactbucket\":\"${ArtifactBucket}\",\"statustopic\":\"${TrainStatusTopic}\",\"accountid\":\"${AWS::AccountId}\",\"codebucket\":\"${CodeBucket}\",\"projectname\":\"${ImageBuild}\",\"trainentrypoint\":\"none\",\"hostinstancecount\":\"1\",\"hostinstancetype\":\"ml.t2.medium\",\"traininstancecount\":\"1\",\"traininstancetype\":\"ml.m5.large\",\"trainsourcefile\":\"none\",\"pyversion\":\"py3\",\"trainvolumesize\":\"10\",\"trainmaxrun\":\"4\",\"inputmode\":\"File\",\"hostentrypoint\":\"none\",\"hostsourcefile\":\"none\",\"enablecloudwatchmetrics\":\"false\",\"containerloglevel\":\"200\",\"trainingsteps\":\"1000\",\"evaluationsteps\":\"100\",\"requirementsfile\":\"none\",\"modelhostingenvironment\":{}}"
        }
      }
    },
    "ParameterStoreOverride": {
      "Type": "Custom::ParamterUpdate",
      "DependsOn": [
        "ParameterStore",
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ParameterUpdateLambda",
            "Arn"
          ]
        },
        "name": {
          "Ref": "ParameterStore"
        },
        "value": {
          "Ref": "Parameters"
        }
      }
    },
    "VersionParameterStore": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Value": "0"
      }
    },
    "ModelClear": {
      "Type": "Custom::SageMakerModelClear",
      "DependsOn": [
        "CFNLambdaPolicy",
        "EndpointConfigClear"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerClearModelLambda",
            "Arn"
          ]
        },
        "name": {
          "Fn::Sub": "${AWS::StackName}-"
        }
      }
    },
    "EndpointConfigClear": {
      "Type": "Custom::SageMakerEndpointConfigClear",
      "DependsOn": [
        "CFNLambdaPolicy",
        "EndpointClear"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerClearEndpointConfigLambda",
            "Arn"
          ]
        },
        "name": {
          "Fn::Sub": "${AWS::StackName}-"
        }
      }
    },
    "EndpointClear": {
      "Type": "Custom::SageMakerEndpointClear",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SageMakerClearEndpointLambda",
            "Arn"
          ]
        },
        "name": {
          "Fn::GetAtt": [
            "Variables",
            "EndpointName"
          ]
        }
      }
    },
    "TrainStatusTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Fn::Sub": "${AWS::StackName}-train-status"
        }
      }
    },
    "ArtifactBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      }
    },
    "ArtifactClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "ArtifactBucket"
        }
      }
    },
    "DataBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateDataBucket"
    },
    "DataClear": {
      "Type": "Custom::S3Clear",
      "Condition": "CreateDataBucket",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "DataBucket"
        }
      }
    },
    "CheckPointBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "CheckPointClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "CheckPointBucket"
        }
      }
    },
    "CodeBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {}
    },
    "CodeClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3ClearLambda",
            "Arn"
          ]
        },
        "Bucket": {
          "Ref": "CodeBucket"
        }
      }
    },
    "ModelRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          {
            "Fn::If": [
              "ExternalHostingPolicy",
              {
                "Ref": "ExternalHostingPolicy"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sagemaker:*",
                    "cloudwatch:PutMetricData",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogStreams",
                    "ecr:GetAuthorizationToken",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "cloudwatch:PutMetricData",
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:DeleteAlarms",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateNetworkInterfacePermission",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DeleteNetworkInterfacePermission",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "application-autoscaling:DeleteScalingPolicy",
                    "application-autoscaling:DeleteScheduledAction",
                    "application-autoscaling:DeregisterScalableTarget",
                    "application-autoscaling:DescribeScalableTargets",
                    "application-autoscaling:DescribeScalingActivities",
                    "application-autoscaling:DescribeScalingPolicies",
                    "application-autoscaling:DescribeScheduledActions",
                    "application-autoscaling:PutScalingPolicy",
                    "application-autoscaling:PutScheduledAction",
                    "application-autoscaling:RegisterScalableTarget",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:GetLogEvents",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}"
                    }
                  ]
                },
                {
                  "Effect": "Deny",
                  "Action": [
                    "s3:Put*",
                    "s3:Delete*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:Get*",
                    "s3:PutObject",
                    "s3:Head*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepo}"
                    }
                  ]
                },
                {
                  "Action": "iam:CreateServiceLinkedRole",
                  "Effect": "Allow",
                  "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
                  "Condition": {
                    "StringLike": {
                      "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": "sagemaker.amazonaws.com"
                    }
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TrainingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess",
          {
            "Fn::If": [
              "ExternalTrainingPolicy",
              {
                "Ref": "ExternalTrainingPolicy"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sagemaker:*",
                    "ecr:GetAuthorizationToken",
                    "cloudwatch:PutMetricData",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*",
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": "sagemaker.amazonaws.com"
                    }
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CodeBucket}"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CheckPointBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CheckPointBucket}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepo}"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "StepFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "CloudWatchLogsPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CodeRepo": {
      "Type": "AWS::CodeCommit::Repository",
      "Condition": "CreateRepo",
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "CodeTrigger": {
      "Type": "Custom::CodeCommitTrigger",
      "DependsOn": [
        "CFNLambdaPolicy"
      ],
      "Condition": "CreateRepoTrigger",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CodeCommitTriggerLambda",
            "Arn"
          ]
        },
        "repositoryName": {
          "Fn::GetAtt": [
            "Variables",
            "RepoName"
          ]
        },
        "trigger": {
          "branches": {
            "Ref": "BranchBuildTrigger"
          },
          "destinationArn": {
            "Ref": "LaunchTopic"
          },
          "events": [
            "all"
          ],
          "name": {
            "Ref": "AWS::StackName"
          }
        }
      }
    },
    "ECRRepo": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryPolicyText": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ]
            }
          ]
        }
      }
    },
    "ImageBuild": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name": "IMAGE_REPO_NAME",
              "Value": {
                "Ref": "ECRRepo"
              }
            },
            {
              "Name": "AWS_DEFAULT_REGION",
              "Value": {
                "Ref": "AWS::Region"
              }
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Value": {
                "Ref": "AWS::AccountId"
              }
            },
            {
              "Name": "STACK_NAME",
              "Value": {
                "Ref": "AWS::StackName"
              }
            }
          ],
          "Image": "aws/codebuild/docker:17.09.0",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Image-build"
        },
        "ServiceRole": {
          "Ref": "ServiceRole"
        },
        "Source": {
          "Fn::If": [
            "UseCodeBucket",
            {
              "Type": "S3",
              "Location": {
                "Ref": "ExternalCodeBucket"
              },
              "BuildSpec": "version: 0.2\n\nphases:\n  pre_build:\n    commands:\n      - echo Logging in to Amazon ECR...\n      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)\n  build:\n    commands:\n      - echo Build started on `date`\n      - echo \"Building the Training Docker image...\"\n      - cd $CODEBUILD_SRC_DIR/$DOCKERFILE_PATH \n      - REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME\n      - |\n        if docker pull $REPO:$IMAGE_TAG; then\n            docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG --cache-from $REPO:$IMAGE_TAG .\n        else\n            docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\n        fi\n      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPO:$IMAGE_TAG      \n      - echo \"Pushing the Docker image...\"\n      - docker push $REPO:$IMAGE_TAG\n\n  post_build:\n    commands:\n      - echo Build completed on `date`\n\n\n\n\n"
            },
            {
              "Type": {
                "Fn::If": [
                  "IsCodeCommitRepo",
                  "CODECOMMIT",
                  "GITHUB"
                ]
              },
              "Location": {
                "Fn::GetAtt": [
                  "Variables",
                  "RepoUrl"
                ]
              },
              "BuildSpec": "version: 0.2\n\nphases:\n  pre_build:\n    commands:\n      - echo Logging in to Amazon ECR...\n      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)\n  build:\n    commands:\n      - echo Build started on `date`\n      - echo \"Building the Training Docker image...\"\n      - cd $CODEBUILD_SRC_DIR/$DOCKERFILE_PATH \n      - REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME\n      - |\n        if docker pull $REPO:$IMAGE_TAG; then\n            docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG --cache-from $REPO:$IMAGE_TAG .\n        else\n            docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\n        fi\n      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPO:$IMAGE_TAG      \n      - echo \"Pushing the Docker image...\"\n      - docker push $REPO:$IMAGE_TAG\n\n  post_build:\n    commands:\n      - echo Build completed on `date`\n\n\n\n\n",
              "Auth": {
                "Fn::If": [
                  "IsCodeCommitRepo",
                  {
                    "Ref": "AWS::NoValue"
                  },
                  {
                    "Type": "OAUTH"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "ClearECR": {
      "Type": "Custom::ClearImage",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClearECRLambda",
            "Arn"
          ]
        },
        "repo": {
          "Ref": "ECRRepo"
        }
      }
    },
    "ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonECS_FullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "codebuild",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "CloudWatchLogsPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "CodeCommitPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:GitPull",
                    "ecr:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "S3GetObjectPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:GetObjectVersion"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "S3PutObjectPolicy",
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "dashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": {
          "Ref": "AWS::StackName"
        },
        "DashboardBody": {
          "Fn::Sub": "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# ${AWS::StackName} Dashboard\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":9,\"properties\":{\"markdown\":\"## SageMaker Endpoint\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"/aws/sagemaker/Endpoints\",\"CPUUtilization\",\"EndpointName\",\"${AWS::StackName}\",\"VariantName\",\"prod\",{\"yAxis\":\"right\"}],[\".\",\"MemoryUtilization\",\".\",\".\",\".\",\".\"]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6,\"x\":0,\"y\":11},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":24,\"properties\":{\"markdown\":\"## Step Function StateMachine\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/States\",\"ExecutionTime\",\"StateMachineArn\",\"${StateMachine}\"]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6,\"x\":0,\"y\":26},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":true,\"metrics\":[[\"AWS/States\",\"ExecutionThrottled\",\"StateMachineArn\",\"${StateMachine}\",{\"stat\":\"Sum\"}],[\".\",\"ExecutionsAborted\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"ExecutionsFailed\",\".\",\".\",{\"color\":\"#d62728\",\"stat\":\"Sum\"}],[\".\",\"ExecutionsSucceeded\",\".\",\".\",{\"color\":\"#2ca02c\",\"stat\":\"Sum\"}],[\".\",\"ExecutionsTimedOut\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\"},\"height\":6,\"width\":6,\"x\":6,\"y\":26},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":39,\"properties\":{\"markdown\":\"## Step Function Lambdas \"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetDataConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetDataConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetEndpointConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetEndpointConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetModelConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetModelConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetTrainingConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetTrainingConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":41},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaBuildStatusInference}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaBuildStatusInference\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaBuildStatusTraining}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaBuildStatusTraining\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaCreateEndpointConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaCreateEndpointConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaCreateModel}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaCreateModel\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":47},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaDeleteEndpoint}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaDeleteEndpoint\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaDeleteEndpointConfig}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaDeleteEndpointConfig\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaDeleteModel}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaDeleteModel\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaDeployCheck}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaDeployCheck\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaEndpointStatus}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaEndpointStatus\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaGetArtifact}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaGetArtifact\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaHPOStatus}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaHPOStatus\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaInitialize}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaInitialize\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":59},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaListModels}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaListModels\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":65},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaNotificationFail}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaNotificationFail\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":65},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaNotificationSuccess}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaNotificationSuccess\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":65},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaStartBuildInference}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaStartBuildInference\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":65},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaStartBuildTraining}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaStartBuildTraining\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":71},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaStartHPO}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaStartHPO\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":71},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaStartTraining}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaStartTraining\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":71},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaTrainingStatus}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaTrainingStatus\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":71},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${StepLambdaUpdateEndpoint}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"StepLambdaUpdateEndpoint\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":77},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LaunchLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LaunchLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":77},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${RollbackLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"RollbackLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":77}]}"
        }
      }
    },
    "SageMakerNotebookInstance": {
      "Type": "AWS::SageMaker::NotebookInstance",
      "Condition": "NoteBookInstance",
      "Properties": {
        "InstanceType": "ml.t2.medium",
        "NotebookInstanceName": {
          "Fn::GetAtt": [
            "Notebook",
            "Name"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "InternalNotebookRole",
            "Arn"
          ]
        },
        "LifecycleConfigName": {
          "Fn::GetAtt": [
            "SageMakerNotebookLifecycle",
            "NotebookInstanceLifecycleConfigName"
          ]
        }
      }
    },
    "SageMakerNotebookLifecycle": {
      "Type": "AWS::SageMaker::NotebookInstanceLifecycleConfig",
      "Condition": "NoteBookInstance",
      "Properties": {
        "OnCreate": [
          {
            "Content": {
              "Fn::Base64": {
                "Fn::Sub": "#! /bin/bash\nset -ex \ncd /home/ec2-user\n\ncd SageMaker\nmkdir -p SageBuild\ncd SageBuild\naws s3 cp s3://${AssetBucket}/${AssetPrefix}/notebooks.zip .\nunzip notebooks.zip \nrm notebooks.zip\necho '{\"Region\":\"${AWS::Region}\",\"StackName\":\"${AWS::StackName}\"}' > config.json\n\nfor notebook in $(find . | grep .ipynb); do\n    jupyter trust $notebook\ndone\n\ncd ..\nchown \"ec2-user\" SageBuild --recursive \n"
              }
            }
          }
        ]
      }
    },
    "InternalNotebookRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "NoteBookInstance",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          {
            "Ref": "NotebookPolicy"
          },
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ]
      }
    },
    "NotebookPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Condition": "NoteBookInstance",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": [
                {
                  "Ref": "LaunchTopic"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:Get*",
                "ssm:Put*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ParameterStore}"
                },
                {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${VersionParameterStore}"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateStack"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:Describe*",
                "states:List*"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codecommit:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CodeRepo",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sagemaker:InvokeEndpoint"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:sagemaker::${AWS::AccountId}:endpoint/${Variables.EndpointName}"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:UpdateFunctionCode"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepLambdaGetTrainingConfig",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "StepLambdaGetEndpointConfig",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}/*"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${AssetBucket}/*"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${CodeBucket}/*"
                }
              ]
            },
            {
              "Effect": "Deny",
              "Action": [
                "s3:DeleteBucket*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${Variables.DataBucket}"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sns:ListSubscriptions",
                "sns:ConfirmSubscription"
              ],
              "Resource": [
                {
                  "Ref": "TrainStatusTopic"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": [
                {
                  "Ref": "LaunchTopic"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "AlexaLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require(\"aws-sdk\");aws.config.region=process.env.AWS_REGION||\"us-east-1\";var step=new aws.StepFunctions,sns=new aws.SNS;function stop(){return getExecution().then(result=>result&&\"RUNNING\"===result.status?step.stopExecution({executionArn:result.executionArn,cause:\"ALEXA manual stop\"}).promise().then(()=>\"Current Job has been stopped\"):\"there is no job to stop\")}function start(){return getExecution().then(result=>result&&\"RUNNING\"===result.status?\"A job is currently executing\":sns.publish({Message:\"{}\",TopicArn:process.env.START_TOPIC}).promise().then(()=>\"A new job has been started\"))}function getInfo(){return getExecution().then(info=>step.getExecutionHistory({executionArn:info.executionArn,reverseOrder:!0}).promise().then(history=>{if(info.stopDate)return`The latest job ended in status ${info.status}, was started at ${date(info.startDate)}, and ended at ${date(info.stopDate)}`;var step=history.events.map(x=>{return Object.keys(x).map(y=>x[y].name).find(y=>y)}).filter(x=>x)[0];return`the current job was started at ${date(info.startDate)}, is in state ${info.status}, and the current step is ${step?step.replace(/([a-z])([A-Z])/g,\"$1 $2\"):\"not known\"}`}))}function getStatus(){return getExecution().then(result=>{if(result)var message=`Your job is in state ${result.status}`;else message=\"You have not run any jobs\";return message})}function getExecution(){return step.listExecutions({stateMachineArn:process.env.STEPFUNCTION_ARN}).promise().then(result=>result.executions[0])}function date(string){var d=new Date(string);return`${d.toUTCString().match(/(.*, \\S* \\S*)/)[1]} at ${d.toUTCString().match(/.*, \\S* \\S* \\S* (\\S*:\\S*):.*/)[1]} UTC`}function Response(callback,end=!1){return function(message){callback(null,{version:\"1.0\",sessionAttributes:{},response:{outputSpeech:{type:\"PlainText\",text:message},shouldEndSession:end}})}}exports.handler=function(event,context,callback){console.log(JSON.stringify(event,null,2));var response=Response(callback);try{if(\"LaunchRequest\"===event.request.type)response(\"Welcome to sagebuild, you can start,stop or get the status of your build by saying start, stop, status, or info\");else if(\"IntentRequest\"===event.request.type)switch(event.request.intent.name){case\"AMAZON.CancelIntent\":case\"AMAZON.StopIntent\":stop().then(response);break;case\"AMAZON.HelpIntent\":response(\"You can start, stop or get the status of your build by saying start, stop, or status\");break;case\"Start\":start().then(response);break;case\"Status\":getStatus().then(response);break;case\"Info\":getInfo().then(response)}else\"SessionEndedRequest\"===event.request.type&&callback(null)}catch(e){console.log(e),callback(e)}};"
        },
        "Handler": "index.handler",
        "Environment": {
          "Variables": {
            "STEPFUNCTION_ARN": {
              "Ref": "StateMachine"
            },
            "START_TOPIC": {
              "Ref": "LaunchTopic"
            }
          }
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "AlexaLambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": 60
      }
    },
    "AlexaPermissions": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AlexaLambda",
            "Arn"
          ]
        },
        "Principal": "alexa-appkit.amazon.com"
      }
    },
    "AlexaLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSStepFunctionsReadOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "StartBuild",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Action": "sns:*",
                "Resource": {
                  "Ref": "LaunchTopic"
                }
              }
            }
          }
        ]
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Automates the building and deployment of SageMaker custom models using StepFunctions and CodeBuild",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "General Parameters"
          },
          "Parameters": [
            "ExternalTrainingPolicy",
            "ExternalHostingPolicy",
            "ConfigFramework",
            "ConfigDeploy",
            "Type",
            "Parameters"
          ]
        },
        {
          "Label": {
            "default": "Data Bucket Configuration"
          },
          "Parameters": [
            "ExternalDataBucket",
            "ExternalLaunchTopic"
          ]
        },
        {
          "Label": {
            "default": "Repository Configuration"
          },
          "Parameters": [
            "BranchBuildTrigger",
            "ExternalCodeCommitRepo",
            "ExternalGithubRepo",
            "ExternalCodeBucket"
          ]
        },
        {
          "Label": {
            "default": "Notebook Instance  Configuration"
          },
          "Parameters": [
            "Type",
            "NoteBookInstanceType"
          ]
        },
        {
          "Label": {
            "default": "Lambda Hook Configuration"
          },
          "Parameters": [
            "EndpointConfigLambda",
            "TrainingConfigLambda",
            "ModelConfigLambda"
          ]
        }
      ],
      "ParameterLabels": {
        "ExternalTrainingPolicy": {
          "default": "Additional Training IAM Policy"
        },
        "ExternalHostingPolicy": {
          "default": "Additional Hosting IAM Policy"
        },
        "ConfigFramework": {
          "default": "Configuration"
        },
        "EndpointConfigLambda": {
          "default": "Endpoint Config Lambda Override"
        },
        "TrainingConfigLambda": {
          "default": "Training Config Lambda Override"
        },
        "ModelConfigLambda": {
          "default": "Model Config Lambda Override"
        },
        "ExternalCodeBucket": {
          "default": "External Code Bucket"
        },
        "NoteBookInstanceType": {
          "default": "SageMaker Notebook Instance Type"
        },
        "ExternalDataBucket": {
          "default": "External Training Data Bucket"
        },
        "BranchBuildTrigger": {
          "default": "Repository trigger branch"
        },
        "ExternalCodeCommitRepo": {
          "default": "External AWS CodeCommit Repository"
        },
        "ExternalGithubRepo": {
          "default": "External Github Repository"
        },
        "ExternalLaunchTopic": {
          "default": "Additional SNS Launch Topic"
        },
        "Type": {
          "default": "Type of Pipeline"
        }
      }
    }
  }
}